{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/iOS","result":{"pageContext":{"currentCategory":"iOS","categories":["All","iOS","git"],"edges":[{"node":{"id":"acdad3c9-eba8-5f6d-8f30-c90325ffe5a6","excerpt":"앱이 In-Active 상태가 되는 시나리오를 설명하시오. Foreground In-Active와 Active를 합쳐서 Foreground라고 한다. In-Activeg App이 실행 중이지만 이벤트를 받지 않는 상태 시나리오 사용자가 앱을 실행했을 때 Not Running -> In-Active -> Active 앱 실행 도중 홈 버튼을 눌렀을 때 Active -> In-Active -> Background 앱을 다시 켰을 때 Background -> Active 앱이 백그라운드에 있다가 Suspended 상태로 전이 Active -> In-Active -> Background -> Suspended","fields":{"slug":"/in-Active/"},"frontmatter":{"categories":"iOS","title":"앱이 In-Active 상태가 되는 시나리오","date":"October 12, 2021"}},"next":{"fields":{"slug":"/scenedelegate/"}},"previous":null},{"node":{"id":"70c417e4-a915-507d-97bd-36fe19f7aa6c","excerpt":"SceneDelegate란? SceneDelegate는 Xcode11부터 iOS App 탬플릿 생성 시 자동으로 추가된다. iOS13 이상부터는 SceneDelegate가 AppDelegate의 일부 역할을 담당한다. 여기서 중요한 점은 window의 개념이 Scene 개념으로 대체된다는 것이다. 앱에 둘 이상의 Scene이 있을 수 있으며, 앱의 사용자 인터페이스 및 콘텐츠의 배경으로 사용된다. Scene이 있는 하나의 앱을 갖는 개념은 iOS 및 iPadOS에서 다중 창\u001c앱을 빌드할 수 있습니다.   자동으로 생성되는 SceneDelegate에는 active, resign and disconnect와 같은 친숙한 라이프사이클\u001c이벤트가 있습니다.\nSceneDelegate는 delegate를 사용하며 일반적으로 모든 장면에 응답한다는 점에 유의해야합니다. 하나의 Delegate를 정의하여 앱의 모든 Scene에서 사용합니다.   SceneDelegate에 있는 함수들 SceneDe…","fields":{"slug":"/scenedelegate/"},"frontmatter":{"categories":"iOS","title":"SceneDelegate란?","date":"October 09, 2021"}},"next":{"fields":{"slug":"/delegate-method/"}},"previous":{"fields":{"slug":"/in-Active/"}}},{"node":{"id":"cf6bbb2b-5acd-534d-b0cb-5f451e0685a9","excerpt":"애플리케이션이 실행된 직후 사용자의 화면에 보여지기 직전에 호출 애플리케이션이 최초 실행될 때 호출되는 메소드 애플리케이션이 InActive 상태로 전환되기 직전에 호출  task 일시정지, 타이머 비활성화, 일시정지(게임) 애플리케이션이 백그라운드 상태로 전환된 직후 호출 애플리케이션이 Active 상태가 되기 직전, 화면에 보여지기 직전에 호출 애플리케이션이 Active 상태로 전환된 직후 호출 애플리케이션이 종료되기 직전에 호출","fields":{"slug":"/delegate-method/"},"frontmatter":{"categories":"iOS","title":"iOS App 상황별 Delegate Method","date":"October 05, 2021"}},"next":{"fields":{"slug":"/app-state/"}},"previous":{"fields":{"slug":"/scenedelegate/"}}},{"node":{"id":"f060144e-e7da-5710-bc39-8bf446a2c626","excerpt":"iOS App 상태별 제약사항에 대해 알아보자 not Running : 앱이 실행되지 않은 상태   Foreground : App이 실행되어 클라이언트에게 보여지고 있는 상태 Inactive : 앱이 실행중이지만 아직 아무런 이벤트를 받지 않은 상태 (Foreground 상태에서 전화가 왔을 때, 잠금상태, 멀티태스킹 스크린에서는 Inactive 상태를 가진다.) Active : 앱이 실행중이며 현재 이벤트를 받고 있고 발생한 상태\u001f Background : 앱이 백그라운드에 있는 상태지만 여전히 실행중인 상태 Suspened : 앱이 백그라운드에 있고 실행되는 코드가 없는 상태 (App은 여전히 메모리에 존재하며 Suspened 상태가 될 당시의 상태를 저장하고 있지만, CPU나 배터리를 소모하지 않습니다. 언제든지 메모리 부족등의 이유로 종료됨.) 앱의 상태별 제약사항 Foreground mode는 메모리 및 기타 시스템 리소스에 높은 우선순위를 가지며 시스템은 이러한 리소스를 …","fields":{"slug":"/app-state/"},"frontmatter":{"categories":"iOS","title":"iOS App 상태별 제약사항","date":"October 02, 2021"}},"next":{"fields":{"slug":"/bounds-frame-study/"}},"previous":{"fields":{"slug":"/delegate-method/"}}},{"node":{"id":"9ba76d1f-30ea-56a5-b746-48dbdac2cf0e","excerpt":"Bounds와 Frame Bounds와 Frame의 차이를 공부하기 전에 먼저 Bounds와 Frame이 뭔지 알아보자 Bounds와 Frame은 UIView의 instance property다. Bounds와 Frame 둘 다 CGRect Type이기 때문에 origin과 size를 가진 사각형으로 그려진다. Frame SuperView(상위뷰)의 좌표시스템 안에서 View의 origin과 size를 나타낸다. 여기서 상위뷰란 한단계 상위뷰를 의미한다. 예를 들어 Frame으로 정의된 View의 origin이나 size를 출력하면 해당 View의 상위뷰 origin과 size가 출력된다. 또한 origin과 size를 수정했을 때도 마찬가지로 상위뷰의 origin과 size가 수정된다. Bounds View의 위치와 크기를 자기 자신의 좌표시스템안에서 origin와 size를 나타낸다. 예를 들어 Bounds로 정의된 View의 origin이나 size를 출력하면 해당 View의…","fields":{"slug":"/bounds-frame-study/"},"frontmatter":{"categories":"iOS","title":"Bounds와 Frame의 차이","date":"September 30, 2021"}},"next":{"fields":{"slug":"/development-without-device/"}},"previous":{"fields":{"slug":"/app-state/"}}},{"node":{"id":"0b08f52a-f4a2-5495-a6aa-7613f485fc87","excerpt":"개발할 때 디바이스가 없으면 할 수 없는 것 하드웨어 가속도 센서, 가압계 센서, 주변광 센서, GPS 센서 기능을 사용할 수 없다. 마우스로 시뮬레이터의 터치를 하기 때문에 두 소가락으로 하는 줌인 줌아웃 등의 기능을 테스트 할 수 없다. 카메라를 사용할 수 없다. 마이크를 사용할 수 없다. 전화기능을 사용할 수 없다. API Apple의 푸시 알림 받기와 보내기 기능을 사용할 수 없다. 사진, 연락처, 캘린더에 엑세스하기 위해 개인 정보 보호 알림을 지원하지 않는다. Handoff 기능을 사용할 수 없다. MessageUI 기능을 사용할 수 없다. 그 외 맥의 성능이 아이폰의 성능보다 훨씬 뛰어나 CPU나 메모리 부담이 얼마나 되는지 알 수 없다. 내트워크 속도 태스트를 할 수 없다. 페이스 아이디는 직접 얼굴 인식은 안되지만 인식됨, 안됨 처리는 할 수 있다.","fields":{"slug":"/development-without-device/"},"frontmatter":{"categories":"iOS","title":"iOS 개발할 때 실제 디바이스가 없으면 할 수 없는 것","date":"September 30, 2021"}},"next":{"fields":{"slug":"/git-study/"}},"previous":{"fields":{"slug":"/bounds-frame-study/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}