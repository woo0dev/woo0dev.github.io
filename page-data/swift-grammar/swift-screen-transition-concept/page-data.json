{"componentChunkName":"component---src-templates-blog-template-js","path":"/swift-grammar/swift-screen-transition-concept/","result":{"data":{"cur":{"id":"87feb7de-e4ab-58da-a485-da33f52a7ea0","html":"<h1 id=\"swiftuikit의-화면-전환-개념\" style=\"position:relative;\"><a href=\"#swiftuikit%EC%9D%98-%ED%99%94%EB%A9%B4-%EC%A0%84%ED%99%98-%EA%B0%9C%EB%85%90\" aria-label=\"swiftuikit의 화면 전환 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift(UIKit)의 화면 전환 개념</h1>\n<h2 id=\"content-view-controller\" style=\"position:relative;\"><a href=\"#content-view-controller\" aria-label=\"content view controller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Content View Controller</h2>\n<p>화면을 구성하는 뷰를 직접 구현하고 관련된 이벤트를 처리하는 뷰 컨트롤러</p>\n<h2 id=\"container-view-controller\" style=\"position:relative;\"><a href=\"#container-view-controller\" aria-label=\"container view controller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Container view Controller</h2>\n<ul>\n<li>하나 이상의 Child View Controller를 가지고 있다.</li>\n<li>하나 이상의 Child View Controller를 관리하고 레이아웃과 화면 전환을 담당한다.</li>\n<li>화면 구성과 이벤트 관리는 Child View Controller에서 한다.</li>\n<li>Container View Controller는 대표적으로 Navigation Controller와 TabBar Controller가 있다.</li>\n</ul>\n<h3 id=\"uinavigationcontroller란\" style=\"position:relative;\"><a href=\"#uinavigationcontroller%EB%9E%80\" aria-label=\"uinavigationcontroller란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UINavigationController란?</h3>\n<p>계층구조로 구성된 Content를 순차적으로 보여주는 Container View Controller</p>\n<h3 id=\"navigation-stack\" style=\"position:relative;\"><a href=\"#navigation-stack\" aria-label=\"navigation stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Navigation Stack</h3>\n<p>기본적으로 LIFO(Last Input First Output)구조를 가지고 있다.</p>\n<h1 id=\"화면-전환-방법\" style=\"position:relative;\"><a href=\"#%ED%99%94%EB%A9%B4-%EC%A0%84%ED%99%98-%EB%B0%A9%EB%B2%95\" aria-label=\"화면 전환 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화면 전환 방법</h1>\n<h2 id=\"화면-전환-방법-1\" style=\"position:relative;\"><a href=\"#%ED%99%94%EB%A9%B4-%EC%A0%84%ED%99%98-%EB%B0%A9%EB%B2%95-1\" aria-label=\"화면 전환 방법 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화면 전환 방법</h2>\n<ul>\n<li>소스코드를 통해 전환하는 방식</li>\n<li>Storyboard를 통해 전환하는 방식</li>\n</ul>\n<h2 id=\"세분화된-화면-전환-방법\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EB%B6%84%ED%99%94%EB%90%9C-%ED%99%94%EB%A9%B4-%EC%A0%84%ED%99%98-%EB%B0%A9%EB%B2%95\" aria-label=\"세분화된 화면 전환 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세분화된 화면 전환 방법</h2>\n<ul>\n<li>View Controller의 View 위에 다른 View를 가져와 바꿔치기</li>\n<li>View Controller에서 다른 View Controller를 호출하여 전환하기</li>\n<li>Navigation Controller를 사용하여 화면 전환하기</li>\n<li>화면 전환용 객체 세그웨이(Segueway)를 사용하여 화면 전환하기</li>\n</ul>\n<p>View Controller의 View 위에 다른 View를 가져와 바꿔치기하는 방법은 메모리 누수가 발생할 확률이 크기 때문에 되도록이면 사용하지 않는 것이 좋다.</p>\n<h3 id=\"view-controller에서-다른-view-controoler를-호출하여-전환하기\" style=\"position:relative;\"><a href=\"#view-controller%EC%97%90%EC%84%9C-%EB%8B%A4%EB%A5%B8-view-controoler%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%98%EC%97%AC-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0\" aria-label=\"view controller에서 다른 view controoler를 호출하여 전환하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>View Controller에서 다른 View Controoler를 호출하여 전환하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">present</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> viewControllerToPresent<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIViewController</span><span class=\"token punctuation\">,</span> \n    animated flag<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">,</span> \n  completion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>사용 방법은 다음과 같다. 첫번째 파라미터에는 전환할 화면의 ViewController 인스턴스를 넣어주고 두번째 파라미터에는 화면을 전환할 때 애니메이션 효과를 줄 건지를 Bool 값으로 넣어주면 된다. 세번째 파라미터에는 completion이라는 클로저를 전달 받고 있는데 여기서 클로저를 작성해주면 화면이 전환되는 시점에 맞춰 해당 클로저가 호출된다. 화면 전환은 비동기 방식으로 처리되기 때문에 화면 전환이 완료된 이후에 코드로 처리해야 하는 로직이 있다면 completion에 클로저를 작성하여 활용하면 된다.</p>\n<p>present방식을 사용하면 화면 전환 후 전 화면으로 이동하는 버튼이 따로 없기 때문에 아래 함수를 사용하여 처리해주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">dismiss</span><span class=\"token punctuation\">(</span>animated flag<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">,</span> \n  completion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>dismiss 함수는 이전 화면으로 이동하는 함수이기 때문에 별도로 ViewController를 명시하지 않아도 되고, 나머지 파라미터는 present와 같은 방식으로 사용하면 된다.</p>\n<h3 id=\"navigation-controller를-사용하여-화면-전환하기\" style=\"position:relative;\"><a href=\"#navigation-controller%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%ED%99%94%EB%A9%B4-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0\" aria-label=\"navigation controller를 사용하여 화면 전환하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Navigation Controller를 사용하여 화면 전환하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">pushViewController</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> viewController<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIViewController</span><span class=\"token punctuation\">,</span> \n               animated<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 화면 전환 함수</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// viewController : 전환할 화면의 ViewController 인스턴스</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// animatied : 화면 전환 시 애니메이션 사용 여부</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">popViewController</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">UIViewController</span><span class=\"token operator\">?</span> <span class=\"token comment\">// 이전 화면으로 돌아가는 함수</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// animated : 이전 화면으로 돌아갈 때 애니메이션 사용 여부</span></code></pre></div>\n<p>Navigation Controller는 ViewController의 화면 전환을 직접 컨트롤하고 App의 Navigation 정보를 표시하는 역할을 할 뿐만 아니라 Navigation Stack으로 자식 ViewController를 관리한다. Navigation Stack은 FILO 방식으로 나중에 들어온 화면이 제일 먼저 나가는 방식이다.</p>\n<p>pushViewcontroller를 사용해 Navigation Stack을 추가하고 popViewController를 사용하여 Navigation Stack에 있는 화면을 제거한다.</p>\n<h3 id=\"화면-전환용-객체-세그웨이segueway를-사용하여-화면-전환하기\" style=\"position:relative;\"><a href=\"#%ED%99%94%EB%A9%B4-%EC%A0%84%ED%99%98%EC%9A%A9-%EA%B0%9D%EC%B2%B4-%EC%84%B8%EA%B7%B8%EC%9B%A8%EC%9D%B4segueway%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%ED%99%94%EB%A9%B4-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0\" aria-label=\"화면 전환용 객체 세그웨이segueway를 사용하여 화면 전환하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화면 전환용 객체 세그웨이(Segueway)를 사용하여 화면 전환하기</h3>\n<p>Storyboard에서 출발지와 목적지를 직접 지정하는 방식을 Segueway를 이용한 화면 전환이라고 한다. Segueway를 사용하면 따로 코드를 작성하지 않고 Storyboard만으로 화면을 전환할 수 있는게 특징이다.</p>\n<p>세그웨이의 종류에는 Action Segueway와 Manual Segueway가 있다. 출발지가 ViewController 자체인 경우를 Menual Segueway라고 하며 출발지가 버튼, 셀 등인 경우 Action Segueway라고 한다. Action Segueway는 버튼 터치와 같은 트리거 이벤트가 Segueway로 바로 연결된다. 그래서 소스코드를 추가하지 않아도 화면 전환 기능을 구현할 수 있다. Menual Segueway는 적절한 시점에 performSegue라는 메서드를 호출하면서 Segueway가 실행되어 화면 전환이 일어난다.</p>\n<h3 id=\"action-segueway-종류\" style=\"position:relative;\"><a href=\"#action-segueway-%EC%A2%85%EB%A5%98\" aria-label=\"action segueway 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action Segueway 종류</h3>\n<ul>\n<li>Show : 가장 일반적인 Segueway로 NavigationController를 사용하면 화면 전환시 ViewController가 Navigation Stack에 쌓이게 되고 만약 NavigationController를 사용하지 않는 경우에는 ViewController가 present된다.</li>\n<li>Show Detail : SplitView에서 사용되는 Segueway로 아이폰에서 사용하면 Show Segueway Action과 똑같이 동작하지만 아이패드에서 사용하게 되면 Split 구조에 masterslave 구조가 돼서 보이게 된다.</li>\n<li>Present Modally : 이전 ViewController를 덮으면서 새로운 화면이 나타나게 된다. present 방식과 유사하게 동작한다.</li>\n<li>Present As Popover : 아이패드에서 사용되는 것으로 팝업창을 띄울 때 사용한다. 아이폰에서 사용되지 않는 Action Segueway이다.</li>\n<li>Custom : Segueway를 사용자가 원하는 방식으로 지정하여 사용한다.</li>\n</ul>","excerpt":"Swift(UIKit)의 화면 전환 개념 Content View Controller 화면을 구성하는 뷰를 직접 구현하고 관련된 이벤트를 처리하는 뷰 컨트롤러 Container view Controller 하나 이상의 Child View Controller를 가지고 있다. 하나 이상의 Child View Controller를 관리하고 레이아웃과 화면 전환을 담당한다. 화면 구성과 이벤트 관리는 Child View Controller에서 한다. Container View Controller는 대표적으로 Navigation Controller와 TabBar Controller가 있다. UINavigationController란? 계층구조로 구성된 Content를 순차적으로 보여주는 Container View Controller Navigation Stack 기본적으로 LIFO(Last Input First Output)구조를 가지고 있다. 화면 전환 방법 화면 전환 방법 소스코드를 통해…","frontmatter":{"date":"July 25, 2022","title":"Swift(UIKit)의 화면 전환 개념","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-screen-transition-concept/"}},"next":{"id":"903c4ed5-c916-578d-82a5-7b4b9d2548d9","html":"<h1 id=\"set-vertical-hugging-priority-to-252-에러\" style=\"position:relative;\"><a href=\"#set-vertical-hugging-priority-to-252-%EC%97%90%EB%9F%AC\" aria-label=\"set vertical hugging priority to 252 에러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set vertical hugging priority to 252 에러</h1>\n<h3 id=\"set-vertical-hugging-priority-to-252-에러---auto-layout을-활용하여-constraints를-설정할-때-생기는-에러\" style=\"position:relative;\"><a href=\"#set-vertical-hugging-priority-to-252-%EC%97%90%EB%9F%AC---auto-layout%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-constraints%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%A0-%EB%95%8C-%EC%83%9D%EA%B8%B0%EB%8A%94-%EC%97%90%EB%9F%AC\" aria-label=\"set vertical hugging priority to 252 에러   auto layout을 활용하여 constraints를 설정할 때 생기는 에러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set vertical hugging priority to 252 에러 - Auto Layout을 활용하여 Constraints를 설정할 때 생기는 에러</h3>\n<img src=\"/AutoLayout-Hugging-error-252/AutoLayout-Hugging-error-252-1.png\">\nUIFramework에서 제공되는 일부 View에는 컨텐츠 고유 사이즈라는 개념이 있다.\n<p>예를 들어 UILabel, UIButton 등 텍스트나 이미지에 따라 크기가 결정되는 View들은 다른 View들과 걸린 제약에 의해서 본래 컨텐츠 고유 사이즈보다 더 늘어나거나 줄어들게 되는데 이 때 더 늘어나게 되는 것에 대해 저항하는 제약을 Content Hugging이라고 하고 더 줄어들게 되는 것에 저항하는 제약을 Content Compression Resistance라고 한다.</p>\n<p>컨텐츠 고유 사이즈 변경에 대한 제약에도 우선순위가 있는데 이 우선순위에 따라 컨텐츠 고유 사이즈보다 더 늘어나게 되었을 때 사이즈를 늘어나게 할 건지 줄어들게 할 건지 정할 수 있다.</p>\n<p>위 에러가 발생했을 때는 hugging priority를 설정하는 것으로 에러를 해결할 수 있다.</p>\n<p>hugging priority는 우선순위가 높으면 내 크기를 유지하고 우선순위가 낮으면 크기가 늘어난다.\n<img src=\"/AutoLayout-Hugging-error-252/AutoLayout-Hugging-error-252-2.png\"></p>\n<p>여기서는 위에 라벨의 크기가 늘어나도록 하기 위해 위에 라벨을 선택하여 vertical hugging prioriry를 250으로 낮춰서 에러를 해결했다.\n<img src=\"/AutoLayout-Hugging-error-252/AutoLayout-Hugging-error-252-3.png\"></p>\n<p>vartical hugging priority를 낮췄기 때문에 세로 크기가 변한 것을 확인할 수 있다.</p>\n<p>참고로 priority 값은 1부터 1000까지의 값을 가질 수 있는데 보통 250, 500, 750, 1000과 같이 설정하여 사용하는 경우가 많다.</p>\n<h3 id=\"set-vertical-compression-resistance-priority-to-749-에러\" style=\"position:relative;\"><a href=\"#set-vertical-compression-resistance-priority-to-749-%EC%97%90%EB%9F%AC\" aria-label=\"set vertical compression resistance priority to 749 에러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set vertical compression resistance priority to 749 에러</h3>\n<img src=\"/AutoLayout-Hugging-error-252/AutoLayout-Hugging-error-252-4.png\">\ncompression resistance priority 에러를 일부러 발생시켜 보았다.\n<p>라벨에 엄청 긴 텍스트를 넣었더니 에러가 발생했다. 위에 에러와 같이 Content Compression Resistance prioriry를 변경해주면 해결된다. 지금은 아래 라벨 크기를 고정하기 위해 아래 라벨의 compression resistance vertical을 1000으로 설정해 해결했다.\n<img src=\"/AutoLayout-Hugging-error-252/AutoLayout-Hugging-error-252-5.png\">\n<img src=\"/AutoLayout-Hugging-error-252/AutoLayout-Hugging-error-252-6.png\"></p>","frontmatter":{"date":"July 15, 2022","title":"Set vertical hugging priority to 252 에러","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/error/AutoLayout-Hugging-error-252/"}},"prev":{"id":"29ba3b86-1479-50cc-9ba6-716df56bf984","html":"<p>이번에는 Apple MusicKit을 사용할 일이 있어서 사용방법을 공유해보려고 한다.</p>\n<p>먼저 <a href=\"http://developer.apple.com\">developer.apple.com</a>에서 developer program을 가입해야 한다.</p>\n<h3 id=\"준비-과정\" style=\"position:relative;\"><a href=\"#%EC%A4%80%EB%B9%84-%EA%B3%BC%EC%A0%95\" aria-label=\"준비 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>준비 과정</h3>\n<ol>\n<li>Xcode프로젝트 생성</li>\n<li>MusicKit을 사용하기 위해 <a href=\"http://developer.apple.com\">developer.apple.com</a>에서 Key에 들어가 MusicKit Key와 Identiffiers를 생성한다. (Key는 한 번만 다운로드 받을 수 있으니 꼭 잘 관리해야 한다.)</li>\n<li>다운로드 받은 Key 파일을 열어 private Key 값과 developer에 있는 KeyId, developer teamId를 활용해 JWT를 발급 받아야 한다. (JWT란 웹사이트에서 인증 권한을 처리하기 위한 Json형태의 Token이라고 생각하면 될 것 같다.)</li>\n<li>JWT을 발급 받는 방법은 다양한데 <a href=\"http://jwt.io\">jwt.io</a> 사이트를 활용하는 것도 있지만 저는 <a href=\"https://github.com/pelauimagineering/apple-music-token-generator%EB%A5%BC\">https://github.com/pelauimagineering/apple-music-token-generator를</a> 참고해 발급 받았다. 이 방법으로 발급 받는다면 토큰 유효기간을 설정할 수 있으니 참고하면 좋을 것 같다.</li>\n<li>JWT를 발급 받았다면 준비는 끝!</li>\n</ol>\n<hr>\n<p>간단하게 저는 AppleMusic의 플레이리스트와 그 안에 노래 목록을 가져오겠습니다.</p>\n<p>먼저 프로젝트를 외부에 공개(깃허브 등) 할 예정이라면 JWT를 안전한 방법으로 프로젝트에서 쓸 수 있게 준비해야 합니다.</p>\n<p>저는 github에 public으로 올릴 생각이기에 property list를 만들고 gitignore 처리를 했습니다. 다른 방법도 많으니 본인에게 맞는 방법으로 진행하면 됩니다.</p>\n<p>JWT를 프로젝트에서 사용할 수 있도록 준비를 마쳤다면 가장 먼저 앱에서 AppleMusic에 대한 권한을 허용해야 하는 과정이 필요합니다.</p>\n<p>저는 StoreKit을 활용해 아래의 방법으로 권한을 체크했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">SKCloudServiceController</span><span class=\"token punctuation\">.</span>requestAuthorization <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n\t\t<span class=\"token keyword\">if</span> status <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>authorized <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// API 실행</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>AppleMusic에 대한 접근 권한을 얻었다면 JWT토큰을 활용해 UserToken을 받아야 합니다.</p>\n<p>위에서 권한을 얻은 방법과 같이 StoreKit의 SKCloudServiceController의 requestUserToken 메서드로 UserToken을 받을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">fetchUserToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> async <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> await <span class=\"token function\">SKCloudServiceController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">requestUserToken</span><span class=\"token punctuation\">(</span>forDeveloperToken<span class=\"token punctuation\">:</span> developerToken<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 정말 사전 준비는 끝났으니 실제 API를 사용하는 방법을 알아보겠습니다.</p>\n<hr>\n<p>먼저 Playlist를 가져오겠습니다.</p>\n<p>API URL은 공식문서를 참고하면 됩니다. 지금은 Playlist를 요청하는 URL을 가진 변수를 선언하고 API를 요청하기 위해 필요한 정보들을 담을 수 있도록 URLRequest로 만들어 요청 방식과 JWT, UserToken을 Request에 담아 API를 요청하면 된다.</p>\n<p>반환 값이 Json 형태가 아니기 때문에 JSONDecoder를 활용해 미리 만들어둔 Model로 변환하여 사용하며 된다.</p>\n<p>여기서 조금 고생했던 부분이 AppleMusic Playlist에 대표이미지가 설정되어 있는 경우와 아닌 경우에 속성이 달라서 두가지가 섞여서 반환되면 제대로 Model 변환이 이루어지지 않는 문제가 있었다… 그래서 해당 속성들을 옵셔널로 선언하여 해결했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">fetchPlaylists</span><span class=\"token punctuation\">(</span>userToken<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> async <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Playlist</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> musicURL <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://api.music.apple.com/v1/me/library/playlists\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token builtin\">NetworkError</span><span class=\"token punctuation\">.</span>invalidURL <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> musicRequest <span class=\"token operator\">=</span> <span class=\"token function\">URLRequest</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> musicURL<span class=\"token punctuation\">)</span>\n\tmusicRequest<span class=\"token punctuation\">.</span>httpMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"GET\"</span>\n\tmusicRequest<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bearer <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>developerToken<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">,</span> forHTTPHeaderField<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">)</span>\n\tmusicRequest<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span>userToken<span class=\"token punctuation\">,</span> forHTTPHeaderField<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Music-User-Token\"</span><span class=\"token punctuation\">)</span>\n\t\t\n\t<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> await <span class=\"token builtin\">URLSession</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> musicRequest<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">let</span> playlists <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">PlaylistDatum</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> playlists<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// PlaylistModel.swift</span>\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">PlaylistDatum</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Playlist</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> meta<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Meta</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Playlist</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> href<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> attributes<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Attributes</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Attributes</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> playParams<span class=\"token punctuation\">:</span> <span class=\"token builtin\">PlayParams</span>\n\t\t<span class=\"token keyword\">let</span> artwork<span class=\"token punctuation\">:</span> <span class=\"token builtin\">PlaylistArtwork</span><span class=\"token operator\">?</span>\n\t\t<span class=\"token keyword\">let</span> description<span class=\"token punctuation\">:</span> <span class=\"token builtin\">PlaylistDescription</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">let</span> hasCatalog<span class=\"token punctuation\">,</span> canEdit<span class=\"token punctuation\">,</span> isPublic<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">,</span> dateAdded<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">PlaylistArtwork</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token builtin\">JSONNull</span><span class=\"token operator\">?</span>\n\t\t<span class=\"token keyword\">let</span> url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">PlaylistDescription</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> standard<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">PlayParams</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> isLibrary<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Meta</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> total<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>플레이리스트를 성공적으로 가져왔다면 이제 해당 플레이리스트의 id를 활용해 노래 목록을 가져오는 방법을 알아보겠습니다.</p>\n<p>위와 마찬가지로 userToken과 위의 플레이리스트의 id를 매개변수로 받아 API를 호출해주시고 같은 방법으로 미리 선언해둔 Model로 변환하여 활용하시면 됩니다!</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">fetchSongs</span><span class=\"token punctuation\">(</span>userToken<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> async <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Song</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> musicURL <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://api.music.apple.com/v1/me/library/playlists/<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>id<span class=\"token delimiter variable\">)</span></span>/tracks\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token builtin\">NetworkError</span><span class=\"token punctuation\">.</span>invalidURL <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">var</span> musicRequest <span class=\"token operator\">=</span> <span class=\"token function\">URLRequest</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> musicURL<span class=\"token punctuation\">)</span>\n\t\tmusicRequest<span class=\"token punctuation\">.</span>httpMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"GET\"</span>\n\t\tmusicRequest<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bearer <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>developerToken<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">,</span> forHTTPHeaderField<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">)</span>\n\t\tmusicRequest<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span>userToken<span class=\"token punctuation\">,</span> forHTTPHeaderField<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Music-User-Token\"</span><span class=\"token punctuation\">)</span>\n\t\t\n\t\t<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> await <span class=\"token builtin\">URLSession</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> musicRequest<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">let</span> songs <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">SongDatum</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> songs<span class=\"token punctuation\">.</span>data\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// SongMdoel.swift</span>\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">SongDatum</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Song</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">let</span> meta<span class=\"token punctuation\">:</span> <span class=\"token builtin\">SongMeta</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Song</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\t<span class=\"token keyword\">let</span> type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeEnum</span>\n\t<span class=\"token keyword\">let</span> attributes<span class=\"token punctuation\">:</span> <span class=\"token builtin\">SongAttributes</span>\n\t<span class=\"token keyword\">let</span> href<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">SongAttributes</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> name<span class=\"token punctuation\">,</span> albumName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\t<span class=\"token keyword\">let</span> genreNames<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">let</span> artwork<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Artwork</span>\n\t<span class=\"token keyword\">let</span> hasLyrics<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span>\n\t<span class=\"token keyword\">let</span> artistName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\t<span class=\"token keyword\">let</span> durationInMillis<span class=\"token punctuation\">,</span> discNumber<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n\t<span class=\"token keyword\">let</span> playParams<span class=\"token punctuation\">:</span> <span class=\"token builtin\">SongPlayParams</span>\n\t<span class=\"token keyword\">let</span> trackNumber<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n\t<span class=\"token keyword\">let</span> releaseDate<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\t<span class=\"token keyword\">let</span> contentRating<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Artwork</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\t<span class=\"token keyword\">let</span> height<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">SongPlayParams</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> reportingID<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n\t<span class=\"token keyword\">let</span> catalogID<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\t<span class=\"token keyword\">let</span> kind<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Kind</span>\n\t<span class=\"token keyword\">let</span> reporting<span class=\"token punctuation\">,</span> isLibrary<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span>\n\n\t<span class=\"token keyword\">enum</span> <span class=\"token builtin\">CodingKeys</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">CodingKey</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> reportingID <span class=\"token operator\">=</span> <span class=\"token string\">\"reportingId\"</span>\n\t\t<span class=\"token keyword\">case</span> catalogID <span class=\"token operator\">=</span> <span class=\"token string\">\"catalogId\"</span>\n\t\t<span class=\"token keyword\">case</span> id<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">,</span> reporting<span class=\"token punctuation\">,</span> isLibrary\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token builtin\">Kind</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> song <span class=\"token operator\">=</span> <span class=\"token string\">\"song\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token builtin\">TypeEnum</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> librarySongs <span class=\"token operator\">=</span> <span class=\"token string\">\"library-songs\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">SongMeta</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> total<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>생각보다 관련 자료가 많지 않고 JWT를 처음 사용하면서 조금 어려웠던 부분들이 있었지만 그래서 더욱 재밌었고 꼭 해내겠다는 오기가 생기기도 한 것 같습니다..ㅎ</p>\n<p>API를 요청하고 반환 값을 확인하는 방법은 이것으로 끝이고 실제로 프로젝트에서 활용하기 위해 ViewModel과 Combine을 사용했습니다. 관련 내용은 다음에 자세하게 포스팅 하도록 하겠습니다!</p>\n<p>참고 사이트</p>\n<p><a href=\"https://developer.apple.com/documentation/applemusicapi\">https://developer.apple.com/documentation/applemusicapi</a></p>","frontmatter":{"date":"August 12, 2022","title":"Swift Apple MusicKit 활용하기","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-apple-music-kit/"}},"site":{"siteMetadata":{"siteUrl":"https://woo0dev.github.io","comments":{"utterances":{"repo":"woo0dev/woo0dev.github.io"}}}}},"pageContext":{"slug":"/swift-grammar/swift-screen-transition-concept/","nextSlug":"/error/AutoLayout-Hugging-error-252/","prevSlug":"/swift-grammar/swift-apple-music-kit/"}},"staticQueryHashes":["1073350324","2938748437"]}