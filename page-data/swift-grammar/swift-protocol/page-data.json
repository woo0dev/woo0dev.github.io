{"componentChunkName":"component---src-templates-blog-template-js","path":"/swift-grammar/swift-protocol/","result":{"data":{"cur":{"id":"bd77a445-0524-5f5f-ba4c-314a465abbd1","html":"<h1 id=\"프로토콜이란\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%B4%EB%9E%80\" aria-label=\"프로토콜이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로토콜이란?</h1>\n<p>특정 역할을 하기 위한 메서드, 프로퍼티, 기타 요구사항 등의 청사진</p>\n<h3 id=\"사용법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용법</h3>\n<p>protocol 이름 {\n}</p>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token builtin\">SomeProtocol</span> <span class=\"token punctuation\">{</span>\n    \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protocol</span> <span class=\"token builtin\">SomeProtocol2</span> <span class=\"token punctuation\">{</span>\n    \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">SomeStructrue</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">SomeProtocol</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">SomeProtocol2</span> <span class=\"token punctuation\">{</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>protocol을 채택해 만든 struct이다. class에도 같은 방법으로 프로토콜을 채택할 수 있지만 class가 상속받는 SuperClass가 있다면 SuperClass를 맨 앞에 써야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token builtin\">FirstProtocol</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>프로토콜에서 변수를 선언할 때는 항상 var(변수)로 선언해야 하며 읽기,쓰기 전용인지 읽기 전용인지 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token builtin\">AnotherProtocol</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> someTypeProperty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>프로토콜에서 타입 프로퍼티를 요구하려면 항상 static 키워드를 사용해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token builtin\">FullyNames</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> fullName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">printFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Person</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">FullyNames</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> fullName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">printFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>fullName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 함수를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token builtin\">SomeProtocol5</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">SomeProtocol5</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">required</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>class에서 프로토콜의 생성자 요구사항을 준수하려면 required 식별자가 꼭 필요하다. (만약 class 자체가 상속받을 수 없는 finalClass라면 required 식별자가 필요없다.)\n(구조체에서는 필요없다.)</p>","excerpt":"프로토콜이란? 특정 역할을 하기 위한 메서드, 프로퍼티, 기타 요구사항 등의 청사진 사용법 protocol 이름 {\n} 예시 protocol을 채택해 만든 struct이다. class에도 같은 방법으로 프로토콜을 채택할 수 있지만 class가 상속받는 SuperClass가 있다면 SuperClass를 맨 앞에 써야한다. 프로토콜에서 변수를 선언할 때는 항상 var(변수)로 선언해야 하며 읽기,쓰기 전용인지 읽기 전용인지 정의할 수 있다. 프로토콜에서 타입 프로퍼티를 요구하려면 항상 static 키워드를 사용해야 한다. 위와 같이 함수를 사용할 수 있다. class에서 프로토콜의 생성자 요구사항을 준수하려면 required 식별자가 꼭 필요하다. (만약 class 자체가 상속받을 수 없는 finalClass라면 required 식별자가 필요없다.)\n(구조체에서는 필요없다.)","frontmatter":{"date":"December 22, 2021","title":"Swift Protocol","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-protocol/"}},"next":{"id":"346d0c60-9ce0-5978-ae2b-3549385bed00","html":"<h1 id=\"클래스와-구조체의-차이\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"클래스와 구조체의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스와 구조체의 차이</h1>\n<h2 id=\"클래스와-구조체의-공통점\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%9D%98-%EA%B3%B5%ED%86%B5%EC%A0%90\" aria-label=\"클래스와 구조체의 공통점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스와 구조체의 공통점</h2>\n<ul>\n<li>값을 저장할 프로퍼티를 선언할 수 있습니다.</li>\n<li>함수적 기능을 하는 메서드 선언 할 수 있습니다.</li>\n<li>내부 값에 .을 사용하여 접근할 수 있습니다.</li>\n<li>생성자를 사용해 초기 상태를 설정할 수 있습니다.</li>\n<li>extension을 사용하여 기능을 확장할 수 있습니다.</li>\n<li>Protocol을 채택하여 기능을 설정할 수 있습니다.</li>\n</ul>\n<h2 id=\"클래스와-구조체의-차이점\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"클래스와 구조체의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스와 구조체의 차이점</h2>\n<h3 id=\"클래스\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스</h3>\n<ul>\n<li>참조 타입</li>\n<li>ARC로 메모리를 관리</li>\n<li>상속이 가능</li>\n<li>타입 캐스팅을 통해 런타임에서 클래스 인스턴스의 타입을 확인할 수 있음</li>\n<li>deinit을 사용하여 클래스 인스턴스의 메모리 할당을 해제할 수 있음</li>\n<li>같은 클래스 인스턴스를 여러 개의 변수에 할당한 뒤 값을 변경 시키면 모든 변수에 영향을 줌(메모리가 복사 됨)</li>\n</ul>\n<h3 id=\"구조체\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"구조체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조체</h3>\n<ul>\n<li>값 타입</li>\n<li>구조체 변수를 새로운 변수에 할당할 때마다 새로운 구조체가 할당됩니다.</li>\n<li>즉 같은 구조체를 여러 개의 변수에 할당한 뒤 값을 변경시키더라도 다른 변수에 영향을 주지 않음(값 자체를 복사)</li>\n</ul>\n<h3 id=\"값타입과-참조타입의-예시\" style=\"position:relative;\"><a href=\"#%EA%B0%92%ED%83%80%EC%9E%85%EA%B3%BC-%EC%B0%B8%EC%A1%B0%ED%83%80%EC%9E%85%EC%9D%98-%EC%98%88%EC%8B%9C\" aria-label=\"값타입과 참조타입의 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값타입과 참조타입의 예시</h3>\n<p>클래스(참조 타입)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> <span class=\"token builtin\">count</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> class1 <span class=\"token operator\">=</span> <span class=\"token function\">SomeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> class2 <span class=\"token operator\">=</span> class1\n<span class=\"token keyword\">var</span> class3 <span class=\"token operator\">=</span> class1\nclass3<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nclass1<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>위 코드와 같이 클래스는 참조 타입이기 때문에 class1으로 선언된 class3의 count 값을 변경하면 class1의 count 값이 같이 변경되는 것을 확인할 수 있다.</p>\n<p>구조체(값 타입)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">SomeStruct</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> <span class=\"token builtin\">count</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> struct1 <span class=\"token operator\">=</span> <span class=\"token function\">SomeStruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> struct2 <span class=\"token operator\">=</span> struct1\n<span class=\"token keyword\">var</span> sturct3 <span class=\"token operator\">=</span> struct1\nstruct2<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nsturct3<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\nstruct1<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<p>구조체는 값 타입이기 때문에 struct1으로 선언된 인스턴스의 프로퍼티 값을 변경해도 원본은 변경되지 않는 것을 확인할 수 있다.</p>","frontmatter":{"date":"December 21, 2021","title":"Swift 클래스와 구조체의 차이","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-class-and-struct-diff/"}},"prev":{"id":"05f11148-136b-58cf-b90a-4cffdf15d2fa","html":"<h1 id=\"상속inheritance이란\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8Dinheritance%EC%9D%B4%EB%9E%80\" aria-label=\"상속inheritance이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속(Inheritance)이란?</h1>\n<p>부모가 자식에게 재산을 물려주는 행위\n보통 부모클래스가 자식클래스에게 기능을 물려주는 행위라고 보면 된다.</p>\n<h3 id=\"클래스-종류\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A2%85%EB%A5%98\" aria-label=\"클래스 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 종류</h3>\n<ul>\n<li>부모클래스(SuperClass)</li>\n<li>자식클래스(SubClass)</li>\n<li>기본클래스(BasicClass)\n상속없이 평소에 쓰던 클래스들을 BasicClass라고 볼 수 있다.</li>\n</ul>\n<h3 id=\"사용법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용법</h3>\n<p>class 클래스 이름: 부모클래스 이름 {\n하위클래스 정의\n}</p>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> currentSpeed <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bicycle</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Vehicle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> hasBasket <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> bicycle <span class=\"token operator\">=</span> <span class=\"token function\">Bicycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbicycle<span class=\"token punctuation\">.</span>currentSpeed <span class=\"token operator\">=</span> <span class=\"token number\">15.0</span>\nbicycle<span class=\"token punctuation\">.</span>currentSpeed <span class=\"token comment\">// 15</span></code></pre></div>\n<p>위와 같이 VehicleClass를 상속받은 BicycleClass 인스턴스는 VehicleClass의 프로퍼티에 접근하여 값을 확인 및 변경이 가능한 것을 볼 수 있다.</p>\n<h2 id=\"오버라이딩\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-label=\"오버라이딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오버라이딩</h2>\n<p>상속받는 부모클래스에 있는 함수와 같은 이름의 함수를 만들 때 사용한다.</p>\n<h3 id=\"예시-1\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-1\" aria-label=\"예시 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> currentSpeed <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n    <span class=\"token keyword\">var</span> description<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"traveling at <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>currentSpeed<span class=\"token delimiter variable\">)</span></span> miles per hour\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Train</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Vehicle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"choo choo\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> train <span class=\"token operator\">=</span> <span class=\"token function\">Train</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntrain<span class=\"token punctuation\">.</span><span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// choo choo</span></code></pre></div>\n<p>위와 같이 SuperClass에 있는 makeNoise함수와 이름이 같은 함수를 Train에서 정의할 때 override 키워드를 사용하여 같은 이름의 함수를 만들 수 있다. 만약 오버라이딩을 한 후에 SubClass에서 SuperClass에 정의되어 있는 함수를 사용하고 싶다면 아래 코드와 같이 super 키워드를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> currentSpeed <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n    <span class=\"token keyword\">var</span> description<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"traveling at <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>currentSpeed<span class=\"token delimiter variable\">)</span></span> miles per hour\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"speaker on\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Train</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Vehicle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"choo choo\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> train <span class=\"token operator\">=</span> <span class=\"token function\">Train</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntrain<span class=\"token punctuation\">.</span><span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// speaker on</span>\n\t\t\t\t<span class=\"token comment\">// choo choo</span></code></pre></div>\n<h4 id=\"프로퍼티-오버라이딩\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-label=\"프로퍼티 오버라이딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로퍼티 오버라이딩</h4>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> currentSpeed <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n    <span class=\"token keyword\">var</span> description<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"traveling at <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>currentSpeed<span class=\"token delimiter variable\">)</span></span> miles per hour\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"speaker on\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Vehicle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> gear <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">var</span> description<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>description <span class=\"token operator\">+</span> <span class=\"token string\">\" in gear <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>gear<span class=\"token delimiter variable\">)</span></span>\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> car <span class=\"token operator\">=</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncar<span class=\"token punctuation\">.</span>currentSpeed <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span>\ncar<span class=\"token punctuation\">.</span>gear <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span> <span class=\"token comment\">// traveling at 30.0 miles per hour in gear 2</span></code></pre></div>\n<p>위와 같이 프로퍼티에도 override 키워드를 사용하면 같은 이름의 프로퍼티를 사용할 수 있다.\n오버라이딩된 프로퍼티에 프로퍼티 옵저버 추가하기</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AutomaticCar</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Car</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">var</span> currentSpeed<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">didSet</span> <span class=\"token punctuation\">{</span>\n            gear <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>currentSpeed <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> automatic <span class=\"token operator\">=</span> <span class=\"token function\">AutomaticCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nautomatic<span class=\"token punctuation\">.</span>currentSpeed <span class=\"token operator\">=</span> <span class=\"token number\">35.0</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AutomaticCar: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>automatic<span class=\"token punctuation\">.</span>description<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// AutomaticCar: traveling at 35.0 miles per hour in gear 4</span></code></pre></div>\n<p>위와 같이 오버라이딩된 프로퍼티 안에 프로퍼티 옵저버를 추가하여 사용할 수 있다. 하지만 상수 프로퍼티나 read only 프로퍼티에는 프로퍼티 옵저버를 추가할 수 없다. 그 이유는 상수 프로퍼티나 read only 프로퍼티는 값을 변경할 수 없기 때문이다.\n프로퍼티나 함수를 정의할 때 final 키워드를 사용하면 해당 프로퍼티나 함수를 오버라이딩할 수 없다.</p>","frontmatter":{"date":"December 22, 2021","title":"Swift Inheritance(상속)","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-Inheritance/"}},"site":{"siteMetadata":{"siteUrl":"https://woo0dev.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/swift-grammar/swift-protocol/","nextSlug":"/swift-grammar/swift-class-and-struct-diff/","prevSlug":"/swift-grammar/swift-Inheritance/"}},"staticQueryHashes":["1073350324","2938748437"]}