{"componentChunkName":"component---src-templates-blog-template-js","path":"/swift-grammar/swift-property/","result":{"data":{"cur":{"id":"2a501e8e-6c20-53a0-802d-488e3dd8b556","html":"<h1 id=\"property프로퍼티\" style=\"position:relative;\"><a href=\"#property%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"property프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Property(프로퍼티)</h1>\n<h2 id=\"프로퍼티의-종류\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"프로퍼티의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로퍼티의 종류</h2>\n<ul>\n<li>저장 프로퍼티</li>\n<li>연산 프로퍼티</li>\n<li>타입 프로퍼티</li>\n</ul>\n<h4 id=\"저장-프로퍼티\" style=\"position:relative;\"><a href=\"#%EC%A0%80%EC%9E%A5-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"저장 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>저장 프로퍼티</h4>\n<p>저번에 클래스의 인스턴스는 참조타입이고 구조체의 인스턴스는 값타입이라고 했었는데 때문에 클래스는 클래스의 인스턴스가 상수로 선언되어도 클래스 내의 프로퍼티가 변수로 선언되었다면 값을 변경할 수 있지만, 구조체는 구조체의 인스턴스가 상수로 선언되면 구조체의 인스턴스 내의 프로퍼티가 변수로 선언되어도 값을 변경할 수 없다.  </p>\n<p>구조체 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Dog</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token comment\">// 저장 프로퍼티</span>\n    <span class=\"token keyword\">let</span> gender<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> dog <span class=\"token operator\">=</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Woo\"</span><span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Male\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span>\ndog<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Dooboo\"</span>\n<span class=\"token keyword\">let</span> dog2 <span class=\"token operator\">=</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Woo\"</span><span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Female\"</span><span class=\"token punctuation\">)</span>\ndog2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Dooboo\"</span> <span class=\"token comment\">// 에러</span></code></pre></div>\n<p>클래스 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> gender<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> cat <span class=\"token operator\">=</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Male\"</span><span class=\"token punctuation\">)</span>\ncat<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Woo\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n<p>연산 프로퍼티\n저장 프로퍼티는 클래스나 구조체에서만 사용 가능했지만 연산 프로퍼티는 클래스, 구조체, 열거형에서 사용 가능하다. 연산 프로퍼티는 값을 직접적으로 저장하지 않는 대신에 getter와 setter를 사용해서 다른 프로퍼티와 값들에 직접적으로 접근할 수 있다. (getter만 쓰고 setter를 쓰지 않으면 읽기 전용 프로퍼티로 사용할 수 있다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Stock</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> averagePrice<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n    <span class=\"token keyword\">var</span> quantity<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n    <span class=\"token keyword\">var</span> purchasePrice<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> averagePrice <span class=\"token operator\">*</span> quantity\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>newPrice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 매개변수 이름을 쓰지 않으면 default로 설정되어 있는 매개변수 이름인 newValue로 사용할 수 있다.</span>\n            averagePrice <span class=\"token operator\">=</span> newPrice <span class=\"token operator\">/</span> quantity\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> stock <span class=\"token operator\">=</span> <span class=\"token function\">Stock</span><span class=\"token punctuation\">(</span>averagePrice<span class=\"token punctuation\">:</span> <span class=\"token number\">2300</span><span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">)</span>\nstock<span class=\"token punctuation\">.</span>purchasePrice <span class=\"token comment\">// 6900</span>\nstock<span class=\"token punctuation\">.</span>purchasePrice <span class=\"token operator\">=</span> <span class=\"token number\">3000</span>\nstock<span class=\"token punctuation\">.</span>averagePrice <span class=\"token comment\">// 1000 purchasePrice의 변경으로 averagePrice가 변경됨</span></code></pre></div>\n<p>프로퍼티 옵저버\n프로퍼티 옵저버는 프로퍼티 값의 변화를 감지하고 반영한다.\n새로운 값이 기존 값과 같아도 프로퍼티 옵저버는 호출된다.\n프로퍼티 옵저버는 세가지 경우에만 사용 가능하다.</p>\n<ol>\n<li>저장 프로퍼티</li>\n<li>오버라이딩된 저장, 연산 프로퍼티</li>\n</ol>\n<p>프로퍼티 옵저버 사용 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> credit<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 소괄호 이름 지정</span>\n        <span class=\"token keyword\">willSet</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"잔액이 <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>credit<span class=\"token delimiter variable\">)</span></span>원에서 <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>newValue<span class=\"token delimiter variable\">)</span></span>원으로 변경될 예정입니다.\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">didSet</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"잔액이 <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>oldValue<span class=\"token delimiter variable\">)</span></span>원에서 <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>credit<span class=\"token delimiter variable\">)</span></span>원으로 변경되었습니다.\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> account <span class=\"token operator\">=</span> <span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\naccount<span class=\"token punctuation\">.</span>credit <span class=\"token operator\">=</span> <span class=\"token number\">1000</span></code></pre></div>\n<p>willSet은 값이 변경되기 직전에 실행되는 코드를 작성할 수 있고 didSet은 값이 변경된 후에 실행되는 코드를 작성할 수 있다.</p>\n<p>타입 프로퍼티</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">SomeStructure</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> storedTypeProperty <span class=\"token operator\">=</span> <span class=\"token string\">\"Some value.\"</span> <span class=\"token comment\">// 스토어</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> computedTypeProperty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//컴퓨티드</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token builtin\">SomeStructure</span><span class=\"token punctuation\">.</span>storedTypeProperty\n<span class=\"token builtin\">SomeStructure</span><span class=\"token punctuation\">.</span>computedTypeProperty</code></pre></div>\n<p>타입 프로퍼티는 위와 같이 저장 프로퍼티와 연산 프로퍼티에서 사용 가능하며 static 키워드를 사용합니다. 타입 프로퍼티는 인스턴스를 생성하지 않아도 프로퍼티에 접근하여 사용할 수 있다. 변경도 가능하다.</p>","excerpt":"Property(프로퍼티) 프로퍼티의 종류 저장 프로퍼티 연산 프로퍼티 타입 프로퍼티 저장 프로퍼티 저번에 클래스의 인스턴스는 참조타입이고 구조체의 인스턴스는 값타입이라고 했었는데 때문에 클래스는 클래스의 인스턴스가 상수로 선언되어도 클래스 내의 프로퍼티가 변수로 선언되었다면 값을 변경할 수 있지만, 구조체는 구조체의 인스턴스가 상수로 선언되면 구조체의 인스턴스 내의 프로퍼티가 변수로 선언되어도 값을 변경할 수 없다.   구조체 예시 클래스 예시 연산 프로퍼티\n저장 프로퍼티는 클래스나 구조체에서만 사용 가능했지만 연산 프로퍼티는 클래스, 구조체, 열거형에서 사용 가능하다. 연산 프로퍼티는 값을 직접적으로 저장하지 않는 대신에 getter와 setter를 사용해서 다른 프로퍼티와 값들에 직접적으로 접근할 수 있다. (getter만 쓰고 setter를 쓰지 않으면 읽기 전용 프로퍼티로 사용할 수 있다.) 프로퍼티 옵저버\n프로퍼티 옵저버는 프로퍼티 값의 변화를 감지하고 반영한다.\n새로운…","frontmatter":{"date":"December 20, 2021","title":"Swift 프로퍼티(Property)","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-property/"}},"next":{"id":"76a19570-a928-5b41-99ee-1e0dbc130662","html":"<h1 id=\"클래스와-구조체\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"클래스와 구조체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스와 구조체</h1>\n<p>프로그래머가 데이터를 용도에 맞게 표현하고자 할 때 용이하다. 프로퍼티와 메서드를 사용해서 구조화된 데이터와 기능을 가질 수 있어 하나의 새로운 사용자 정의 데이터타입을 만들어 준다. 사용법은 거의 같다. 하지만 다른 점이 있다. 구조체의 인스턴스는 값타입이고 클래스의 인스턴스는 참조타입이다.</p>\n<p>구조체 정의\nstruct 구조체 이름 {\n프로퍼티와 메서드\n}</p>\n<h2 id=\"구조체\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"구조체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조체</h2>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> nickname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>nickname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Woo\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>nickname\nuser<span class=\"token punctuation\">.</span>age</code></pre></div>\n<p>프로퍼티 값 변경</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">user<span class=\"token punctuation\">.</span>nickname <span class=\"token operator\">=</span> <span class=\"token string\">\"albert\"</span>\nuser<span class=\"token punctuation\">.</span>nickname</code></pre></div>\n<p>함수 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> nickname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>nickname<span class=\"token delimiter variable\">)</span></span> <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>age<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"클래스\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스</h2>\n<p>클래스 정의\nclass 클래스 이름 {\n프로퍼티와 메서드\n}</p>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\t\t<span class=\"token comment\">// 인스턴스가 생성되면 호출</span>\n\t\t<span class=\"token comment\">// 클래스에서는 생성자를 정의해야한다. 인스턴스를 생성하고 초기화하고자 할 때 기본적인 생성자를 사용한다.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span> age <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>age<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> dog <span class=\"token operator\">=</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndog<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"CoCo\"</span>\ndog<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\ndog<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// CoCo</span>\ndog<span class=\"token punctuation\">.</span>age <span class=\"token comment\">// 3</span>\ndog<span class=\"token punctuation\">.</span><span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// name CoCo age 3</span></code></pre></div>\n<h3 id=\"초기화initialization란\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EA%B8%B0%ED%99%94initialization%EB%9E%80\" aria-label=\"초기화initialization란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기화(Initialization)란?</h3>\n<p>클래스 구조체 또는 열거형의 인스턴스를 사용하기 위한 준비 과정</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>매개변수<span class=\"token punctuation\">:</span> 타입<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 프로퍼티 초기화</span>\n    <span class=\"token comment\">// 인스턴스 생성시 필요한 설정을 해주는 코드 작성</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> nickname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>nickname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>nickname <span class=\"token operator\">=</span> nickname\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>nickname <span class=\"token operator\">=</span> <span class=\"token string\">\"albert\"</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>nickname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Woo\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>nickname <span class=\"token comment\">// Woo</span>\nuser<span class=\"token punctuation\">.</span>age <span class=\"token comment\">// 25</span>\n<span class=\"token keyword\">var</span> user2 <span class=\"token operator\">=</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\nuser2<span class=\"token punctuation\">.</span>nickname <span class=\"token comment\">// albert</span>\nuser2<span class=\"token punctuation\">.</span>age <span class=\"token comment\">// 25</span></code></pre></div>\n<h3 id=\"초기화-해제deinitialization\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EA%B8%B0%ED%99%94-%ED%95%B4%EC%A0%9Cdeinitialization\" aria-label=\"초기화 해제deinitialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기화 해제(Deinitialization)</h3>\n<p>이니셜라이저와 반대 역할을 한다.\n인스턴스가 메모리에서 해제되기 직전에 호출된다.\n클래스 인스턴스와 관련하여 원하는 정리 작업을 구현할 수 있다.\n클래스 인스턴스에만 구현할 수 있다.\n예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deinit user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> user3<span class=\"token punctuation\">:</span> <span class=\"token builtin\">User</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\nuser3 <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span> <span class=\"token comment\">// deinit user 출력</span></code></pre></div>\n<p>인스턴스에 nil이 들어가면 deinit가 호출된다.</p>","frontmatter":{"date":"December 16, 2021","title":"Swift 클래스와 구조체","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-class-and-struct/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://woo0dev.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/swift-grammar/swift-property/","nextSlug":"/swift-grammar/swift-class-and-struct/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}