{"componentChunkName":"component---src-templates-blog-template-js","path":"/swift-grammar/swift-optional/","result":{"data":{"cur":{"id":"7a112d24-d204-59db-b752-1e9040d1742f","html":"<h1 id=\"옵셔널이란\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%85%94%EB%84%90%EC%9D%B4%EB%9E%80\" aria-label=\"옵셔널이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵셔널이란?</h1>\n<p>값이 있을 수도 있고 없을 수도 있다.</p>\n<p>예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span></code></pre></div>\n<p>이 두 코드는 얼핏 보기엔 ‘값이 없는 건 똑같은 거 아니야?‘라고 생각할 수 있지만 첫번째 코드는 빈 문자열이 들어있고 두번째 코드는 값이 없는 상태로 둘은 엄연히 다른 코드이다. (nil은 다른 언어에서의 null과 같다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n\n<span class=\"token keyword\">var</span> optionalName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Woo\"</span></code></pre></div>\n<p>nil을 할당할 수 있는 것을 바로 옵셔널이라고 하는데 위 코드처럼 타입 뒤에 ?를 붙여 사용하면 된다. 옵셔널로 선언된 변수의 초기값을 선언하지 않으면 기본값은 nil이 들어간다. 물론 타입에 맞는 값으로 초기화하여 선언할 수 있다.</p>\n<p>주의할 점은 아래와 같이 옵셔널이 아닌 변수에 옵셔널을 할당하려고 하면 에러가 발생한다. 옵셔널 변수에 nil이 아닌 값이 할당되어있는 상태여도 마찬가지이다. 이유는 옵셔널 변수에는 지금 값이 있더라도 언제든지 nil이 할당될 수 있기 때문이다. 옵셔널이 아닌 변수에 nil이 들어가면 에러가 생기는데 그런 상황을 미연에 방지하기 위해서이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> requireName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> optionalName <span class=\"token comment\">// 에러</span></code></pre></div>\n<h1 id=\"옵셔널-바인딩이란\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%85%94%EB%84%90-%EB%B0%94%EC%9D%B8%EB%94%A9%EC%9D%B4%EB%9E%80\" aria-label=\"옵셔널 바인딩이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵셔널 바인딩이란?</h1>\n<p>옵셔널을 해제하는 것</p>\n<p>옵셔널 해제 방법</p>\n<ul>\n<li>명시적 해제</li>\n<li>강제 해제 - !</li>\n<li>\n<p>비강제 해제(옵셔널 바인딩) - if let, guard let\n예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> number<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Optional(3)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> number <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></code></pre></div>\n</li>\n</ul>\n<p>옵셔널 변수인 number를 일반 변수처럼 출력하면 Optional(3)처럼 옵셔널에 감싸져있는 상태로 출력되는 것을 확인할 수 있고, 옵셔널 바인딩을 사용해 비강제 해제하여 출력된 값과 강제 해제하여 출력된 값을 확인할 수 있다. 여기서 주의할 점은 강제 해제를 시도했을 때 해당 옵셔널 변수가 nil이라면 에러를 발생시키며 프로그램이 강제종료되므로 주의하여 사용해야 한다.<br>\nif let 방식을 사용하여 옵셔널 바인딩 할 때에는 else 구문을 추가해 사용할 수 있다. (else 구문은 옵셔널 변수가 nil일 때 실행된다.)<br>\n또 다른 옵셔널 바인딩에는 guard let 방식이 있다. 아래 코드는 nil이 아닐 때만 guard 구문을 실행하고 nil이면 else문을 실행한 뒤 리턴시키는 함수이다. (guard 구문은 true일 때만 구문을 실행하고 false면 else 구문을 실행한다. guard 구문에 대해서는 추후에 자세히 포스팅 할 예정이다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> number<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> number <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>묵시적 해제</li>\n<li>\n<p>컴파일러에 의한 자동 해제</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n<span class=\"token keyword\">if</span> value <span class=\"token operator\">==</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value가 6입니다.\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 출력</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value가 6이 아닙니다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위처럼 연산자를 통해 비교를 할 때에는 컴파일러가 옵셔널을 해제한 후에 비교를 한다.</p>\n</li>\n<li>\n<p>옵셔널의 묵시적 해제</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"12\"</span>\n<span class=\"token keyword\">var</span> stringToInt<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token operator\">!</span> <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\nstringToInt <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<p>위 처럼 옵셔널 변수를 선언할 때 !를 붙여 선언하게 되면 해당 변수를 사용할 때 묵시적으로 옵셔널을 해제해준다.</p>\n</li>\n</ul>","excerpt":"옵셔널이란? 값이 있을 수도 있고 없을 수도 있다. 예시) 이 두 코드는 얼핏 보기엔 ‘값이 없는 건 똑같은 거 아니야?‘라고 생각할 수 있지만 첫번째 코드는 빈 문자열이 들어있고 두번째 코드는 값이 없는 상태로 둘은 엄연히 다른 코드이다. (nil은 다른 언어에서의 null과 같다.) nil을 할당할 수 있는 것을 바로 옵셔널이라고 하는데 위 코드처럼 타입 뒤에 ?를 붙여 사용하면 된다. 옵셔널로 선언된 변수의 초기값을 선언하지 않으면 기본값은 nil이 들어간다. 물론 타입에 맞는 값으로 초기화하여 선언할 수 있다. 주의할 점은 아래와 같이 옵셔널이 아닌 변수에 옵셔널을 할당하려고 하면 에러가 발생한다. 옵셔널 변수에 nil이 아닌 값이 할당되어있는 상태여도 마찬가지이다. 이유는 옵셔널 변수에는 지금 값이 있더라도 언제든지 nil이 할당될 수 있기 때문이다. 옵셔널이 아닌 변수에 nil이 들어가면 에러가 생기는데 그런 상황을 미연에 방지하기 위해서이다. 옵셔널 바인딩이란? 옵셔널…","frontmatter":{"date":"December 15, 2021","title":"Swift 옵셔널과 옵셔널 바인딩","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-optional/"}},"next":{"id":"450cbb93-1be0-5fb1-b50f-91229cd8dfb4","html":"<h1 id=\"반복문이란\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%AC%B8%EC%9D%B4%EB%9E%80\" aria-label=\"반복문이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복문이란?</h1>\n<p>반복적으로 코드가 실행되게 만드는 구문.</p>\n<p>반복문 구문</p>\n<ul>\n<li>for-in\n사용 방법\nfor 루프상수 in 순회대상 {\n실행구문\n}\n루프상수는 반복문 내에서만 사용가능하다.</li>\n</ul>\n<p>범위 연산자를 사용한 예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">4</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>배열을 사용한 예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> array <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>while\n사용 방법\nwhile 조건식 {\n실행구문\n}</li>\n</ul>\n<p>예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> number <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">while</span> number <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">{</span>\n    number<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>5가 들어있었던 변수 number가 10보다 작을 때만 1을 더하는 while문이다.</p>\n<ul>\n<li>repeat-while (다른 언어의 do-while)\n조건을 충족하지 못하더라도 무조건 한 번이상 실행되는 반복문.\n사용 방법\nrepeat {\n실행구문\n} while 조건식</li>\n</ul>\n<p>예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n<span class=\"token keyword\">repeat</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></code></pre></div>\n<p>x는 6이고 조건은 6보다 작을 때 실행되도록 하였지만 repeat-while문은 무조건 한 번은 실행되기 때문에 8이 출력되는 것을 확인할 수 있다.</p>","frontmatter":{"date":"December 04, 2021","title":"Swift 반복문","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-loop/"}},"prev":{"id":"76a19570-a928-5b41-99ee-1e0dbc130662","html":"<h1 id=\"클래스와-구조체\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"클래스와 구조체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스와 구조체</h1>\n<p>프로그래머가 데이터를 용도에 맞게 표현하고자 할 때 용이하다. 프로퍼티와 메서드를 사용해서 구조화된 데이터와 기능을 가질 수 있어 하나의 새로운 사용자 정의 데이터타입을 만들어 준다. 사용법은 거의 같다. 하지만 다른 점이 있다. 구조체의 인스턴스는 값타입이고 클래스의 인스턴스는 참조타입이다.</p>\n<p>구조체 정의\nstruct 구조체 이름 {\n프로퍼티와 메서드\n}</p>\n<h2 id=\"구조체\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"구조체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조체</h2>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> nickname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>nickname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Woo\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>nickname\nuser<span class=\"token punctuation\">.</span>age</code></pre></div>\n<p>프로퍼티 값 변경</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">user<span class=\"token punctuation\">.</span>nickname <span class=\"token operator\">=</span> <span class=\"token string\">\"albert\"</span>\nuser<span class=\"token punctuation\">.</span>nickname</code></pre></div>\n<p>함수 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> nickname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>nickname<span class=\"token delimiter variable\">)</span></span> <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>age<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"클래스\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스</h2>\n<p>클래스 정의\nclass 클래스 이름 {\n프로퍼티와 메서드\n}</p>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\t\t<span class=\"token comment\">// 인스턴스가 생성되면 호출</span>\n\t\t<span class=\"token comment\">// 클래스에서는 생성자를 정의해야한다. 인스턴스를 생성하고 초기화하고자 할 때 기본적인 생성자를 사용한다.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span> age <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>age<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> dog <span class=\"token operator\">=</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndog<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"CoCo\"</span>\ndog<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\ndog<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// CoCo</span>\ndog<span class=\"token punctuation\">.</span>age <span class=\"token comment\">// 3</span>\ndog<span class=\"token punctuation\">.</span><span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// name CoCo age 3</span></code></pre></div>\n<h3 id=\"초기화initialization란\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EA%B8%B0%ED%99%94initialization%EB%9E%80\" aria-label=\"초기화initialization란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기화(Initialization)란?</h3>\n<p>클래스 구조체 또는 열거형의 인스턴스를 사용하기 위한 준비 과정</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>매개변수<span class=\"token punctuation\">:</span> 타입<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 프로퍼티 초기화</span>\n    <span class=\"token comment\">// 인스턴스 생성시 필요한 설정을 해주는 코드 작성</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> nickname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>nickname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>nickname <span class=\"token operator\">=</span> nickname\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>nickname <span class=\"token operator\">=</span> <span class=\"token string\">\"albert\"</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>nickname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Woo\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>nickname <span class=\"token comment\">// Woo</span>\nuser<span class=\"token punctuation\">.</span>age <span class=\"token comment\">// 25</span>\n<span class=\"token keyword\">var</span> user2 <span class=\"token operator\">=</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\nuser2<span class=\"token punctuation\">.</span>nickname <span class=\"token comment\">// albert</span>\nuser2<span class=\"token punctuation\">.</span>age <span class=\"token comment\">// 25</span></code></pre></div>\n<h3 id=\"초기화-해제deinitialization\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EA%B8%B0%ED%99%94-%ED%95%B4%EC%A0%9Cdeinitialization\" aria-label=\"초기화 해제deinitialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기화 해제(Deinitialization)</h3>\n<p>이니셜라이저와 반대 역할을 한다.\n인스턴스가 메모리에서 해제되기 직전에 호출된다.\n클래스 인스턴스와 관련하여 원하는 정리 작업을 구현할 수 있다.\n클래스 인스턴스에만 구현할 수 있다.\n예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deinit user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> user3<span class=\"token punctuation\">:</span> <span class=\"token builtin\">User</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\nuser3 <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span> <span class=\"token comment\">// deinit user 출력</span></code></pre></div>\n<p>인스턴스에 nil이 들어가면 deinit가 호출된다.</p>","frontmatter":{"date":"December 16, 2021","title":"Swift 클래스와 구조체","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-class-and-struct/"}},"site":{"siteMetadata":{"siteUrl":"https://woo0dev.github.io","comments":{"utterances":{"repo":"woo0dev/woo0dev.github.io"}}}}},"pageContext":{"slug":"/swift-grammar/swift-optional/","nextSlug":"/swift-grammar/swift-loop/","prevSlug":"/swift-grammar/swift-class-and-struct/"}},"staticQueryHashes":["1073350324","2938748437"]}