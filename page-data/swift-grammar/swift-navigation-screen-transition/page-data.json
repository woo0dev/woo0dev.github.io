{"componentChunkName":"component---src-templates-blog-template-js","path":"/swift-grammar/swift-navigation-screen-transition/","result":{"data":{"cur":{"id":"4fbcf71e-2733-5b09-9670-71bedf9e39b1","html":"<h1 id=\"navigationviewcontroller를-사용하여-화면-전환하기\" style=\"position:relative;\"><a href=\"#navigationviewcontroller%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%ED%99%94%EB%A9%B4-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0\" aria-label=\"navigationviewcontroller를 사용하여 화면 전환하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NavigationViewController를 사용하여 화면 전환하기</h1>\n<h2 id=\"방법\" style=\"position:relative;\"><a href=\"#%EB%B0%A9%EB%B2%95\" aria-label=\"방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>방법</h2>\n<ul>\n<li>Segue로 Push</li>\n<li>Segue로 Present</li>\n<li>코드로 Push</li>\n<li>코드로 Present</li>\n</ul>\n<h2 id=\"segue로-push\" style=\"position:relative;\"><a href=\"#segue%EB%A1%9C-push\" aria-label=\"segue로 push permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Segue로 Push</h2>\n<ol>\n<li>NavigationViewController를 생성하고 RootViewController와 연결한다.</li>\n<li>Navigation Controller의 Inspector에서 Is Initial View Controller를 선택해 Navigation Controller를 시작하는 Controller로 지정한다.</li>\n<li>화면 전환할 새로운 ViewController를 만들고 코드를 작성할 새로운 ViewController파일을 생성하고 연결한다.</li>\n<li>화면 전환을 실행할 임의의 버튼을 만들고 해당 버튼에서 새로운 ViewController로 우클릭 드래그한 후에 Segue Action에서 Show를 선택한다.</li>\n</ol>\n<p>이 과정을 거치면 버튼을 눌렀을 때 새로운 화면으로 전환되는 것을 확인할 수 있다.<br>\n만약 새로운 화면에서 기본적으로 생성된 버튼을 제외한 임의의 버튼을 이용해 이전 화면으로 이동하고 싶다면 Button Action을 추가하고 아래 메서드를 사용하면 해당 버튼을 눌렀을 때 이전 화면으로 전환할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>navigationController<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">popViewController</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>만약 여러개의 화면이 push되어 있는 상태에서 맨 처음 화면으로 전환하고 싶다면 아래 메서드를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>navigationController<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">popToRootViewController</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"segue로-present\" style=\"position:relative;\"><a href=\"#segue%EB%A1%9C-present\" aria-label=\"segue로 present permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Segue로 Present</h2>\n<ol>\n<li>NavigationViewController를 생성하고 RootViewController와 연결한다.</li>\n<li>Navigation Controller의 Inspector에서 Is Initial View Controller를 선택해 Navigation Controller를 시작하는 Controller로 지정한다.</li>\n<li>화면 전환할 새로운 ViewController를 만들고 코드를 작성할 새로운 ViewController파일을 생성하고 연결한다.</li>\n<li>화면 전환을 실행할 임의의 버튼을 만들고 해당 버튼에서 새로운 ViewController로 우클릭 드래그한 후에 Segue Action에서 Present Modality를 선택한다.</li>\n</ol>\n<p>이 과정을 거치면 버튼을 눌렀을 때 새로운 화면이 기존 화면 위에 덮이는 걸 확인할 수 있다. 기본적으로 Modal 형태이기 때문에 FullScreen을 원한다면 SegueObject를 선택하고 오른쪽 Inpector에서 Presentation을 Full Screen으로 변경하면 된다. 새로운 화면에서 Back Button을 구현하기 위해서는 마찬가지로 Button과 Button Action을 생성하고 아래 메서드를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>presentingViewController<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">dismiss</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>","excerpt":"NavigationViewController를 사용하여 화면 전환하기 방법 Segue로 Push Segue로 Present 코드로 Push 코드로 Present Segue로 Push NavigationViewController를 생성하고 RootViewController와 연결한다. Navigation Controller의 Inspector에서 Is Initial View Controller를 선택해 Navigation Controller를 시작하는 Controller로 지정한다. 화면 전환할 새로운 ViewController를 만들고 코드를 작성할 새로운 ViewController파일을 생성하고 연결한다. 화면 전환을 실행할 임의의 버튼을 만들고 해당 버튼에서 새로운 ViewController로 우클릭 드래그한 후에 Segue Action에서 Show를 선택한다. 이 과정을 거치면 버튼을 눌렀을 때 새로운 화면으로 전환되는 것을 확인할 수 있다. 만약 새로운 화면에서 기본적으로 …","frontmatter":{"date":"August 15, 2022","title":"Swift NavigationViewController로 화면 전환하기","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-navigation-screen-transition/"}},"next":{"id":"29ba3b86-1479-50cc-9ba6-716df56bf984","html":"<p>이번에는 Apple MusicKit을 사용할 일이 있어서 사용방법을 공유해보려고 한다.</p>\n<p>먼저 <a href=\"http://developer.apple.com\">developer.apple.com</a>에서 developer program을 가입해야 한다.</p>\n<h3 id=\"준비-과정\" style=\"position:relative;\"><a href=\"#%EC%A4%80%EB%B9%84-%EA%B3%BC%EC%A0%95\" aria-label=\"준비 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>준비 과정</h3>\n<ol>\n<li>Xcode프로젝트 생성</li>\n<li>MusicKit을 사용하기 위해 <a href=\"http://developer.apple.com\">developer.apple.com</a>에서 Key에 들어가 MusicKit Key와 Identiffiers를 생성한다. (Key는 한 번만 다운로드 받을 수 있으니 꼭 잘 관리해야 한다.)</li>\n<li>다운로드 받은 Key 파일을 열어 private Key 값과 developer에 있는 KeyId, developer teamId를 활용해 JWT를 발급 받아야 한다. (JWT란 웹사이트에서 인증 권한을 처리하기 위한 Json형태의 Token이라고 생각하면 될 것 같다.)</li>\n<li>JWT을 발급 받는 방법은 다양한데 <a href=\"http://jwt.io\">jwt.io</a> 사이트를 활용하는 것도 있지만 저는 <a href=\"https://github.com/pelauimagineering/apple-music-token-generator%EB%A5%BC\">https://github.com/pelauimagineering/apple-music-token-generator를</a> 참고해 발급 받았다. 이 방법으로 발급 받는다면 토큰 유효기간을 설정할 수 있으니 참고하면 좋을 것 같다.</li>\n<li>JWT를 발급 받았다면 준비는 끝!</li>\n</ol>\n<hr>\n<p>간단하게 저는 AppleMusic의 플레이리스트와 그 안에 노래 목록을 가져오겠습니다.</p>\n<p>먼저 프로젝트를 외부에 공개(깃허브 등) 할 예정이라면 JWT를 안전한 방법으로 프로젝트에서 쓸 수 있게 준비해야 합니다.</p>\n<p>저는 github에 public으로 올릴 생각이기에 property list를 만들고 gitignore 처리를 했습니다. 다른 방법도 많으니 본인에게 맞는 방법으로 진행하면 됩니다.</p>\n<p>JWT를 프로젝트에서 사용할 수 있도록 준비를 마쳤다면 가장 먼저 앱에서 AppleMusic에 대한 권한을 허용해야 하는 과정이 필요합니다.</p>\n<p>저는 StoreKit을 활용해 아래의 방법으로 권한을 체크했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">SKCloudServiceController</span><span class=\"token punctuation\">.</span>requestAuthorization <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n\t\t<span class=\"token keyword\">if</span> status <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>authorized <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// API 실행</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>AppleMusic에 대한 접근 권한을 얻었다면 JWT토큰을 활용해 UserToken을 받아야 합니다.</p>\n<p>위에서 권한을 얻은 방법과 같이 StoreKit의 SKCloudServiceController의 requestUserToken 메서드로 UserToken을 받을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">fetchUserToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> async <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> await <span class=\"token function\">SKCloudServiceController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">requestUserToken</span><span class=\"token punctuation\">(</span>forDeveloperToken<span class=\"token punctuation\">:</span> developerToken<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 정말 사전 준비는 끝났으니 실제 API를 사용하는 방법을 알아보겠습니다.</p>\n<hr>\n<p>먼저 Playlist를 가져오겠습니다.</p>\n<p>API URL은 공식문서를 참고하면 됩니다. 지금은 Playlist를 요청하는 URL을 가진 변수를 선언하고 API를 요청하기 위해 필요한 정보들을 담을 수 있도록 URLRequest로 만들어 요청 방식과 JWT, UserToken을 Request에 담아 API를 요청하면 된다.</p>\n<p>반환 값이 Json 형태가 아니기 때문에 JSONDecoder를 활용해 미리 만들어둔 Model로 변환하여 사용하며 된다.</p>\n<p>여기서 조금 고생했던 부분이 AppleMusic Playlist에 대표이미지가 설정되어 있는 경우와 아닌 경우에 속성이 달라서 두가지가 섞여서 반환되면 제대로 Model 변환이 이루어지지 않는 문제가 있었다… 그래서 해당 속성들을 옵셔널로 선언하여 해결했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">fetchPlaylists</span><span class=\"token punctuation\">(</span>userToken<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> async <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Playlist</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> musicURL <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://api.music.apple.com/v1/me/library/playlists\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token builtin\">NetworkError</span><span class=\"token punctuation\">.</span>invalidURL <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> musicRequest <span class=\"token operator\">=</span> <span class=\"token function\">URLRequest</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> musicURL<span class=\"token punctuation\">)</span>\n\tmusicRequest<span class=\"token punctuation\">.</span>httpMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"GET\"</span>\n\tmusicRequest<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bearer <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>developerToken<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">,</span> forHTTPHeaderField<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">)</span>\n\tmusicRequest<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span>userToken<span class=\"token punctuation\">,</span> forHTTPHeaderField<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Music-User-Token\"</span><span class=\"token punctuation\">)</span>\n\t\t\n\t<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> await <span class=\"token builtin\">URLSession</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> musicRequest<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">let</span> playlists <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">PlaylistDatum</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> playlists<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// PlaylistModel.swift</span>\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">PlaylistDatum</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Playlist</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> meta<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Meta</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Playlist</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> href<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> attributes<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Attributes</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Attributes</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> playParams<span class=\"token punctuation\">:</span> <span class=\"token builtin\">PlayParams</span>\n\t\t<span class=\"token keyword\">let</span> artwork<span class=\"token punctuation\">:</span> <span class=\"token builtin\">PlaylistArtwork</span><span class=\"token operator\">?</span>\n\t\t<span class=\"token keyword\">let</span> description<span class=\"token punctuation\">:</span> <span class=\"token builtin\">PlaylistDescription</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">let</span> hasCatalog<span class=\"token punctuation\">,</span> canEdit<span class=\"token punctuation\">,</span> isPublic<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">,</span> dateAdded<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">PlaylistArtwork</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token builtin\">JSONNull</span><span class=\"token operator\">?</span>\n\t\t<span class=\"token keyword\">let</span> url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">PlaylistDescription</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> standard<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">PlayParams</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> isLibrary<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Meta</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> total<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>플레이리스트를 성공적으로 가져왔다면 이제 해당 플레이리스트의 id를 활용해 노래 목록을 가져오는 방법을 알아보겠습니다.</p>\n<p>위와 마찬가지로 userToken과 위의 플레이리스트의 id를 매개변수로 받아 API를 호출해주시고 같은 방법으로 미리 선언해둔 Model로 변환하여 활용하시면 됩니다!</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">fetchSongs</span><span class=\"token punctuation\">(</span>userToken<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> async <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Song</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> musicURL <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://api.music.apple.com/v1/me/library/playlists/<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>id<span class=\"token delimiter variable\">)</span></span>/tracks\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token builtin\">NetworkError</span><span class=\"token punctuation\">.</span>invalidURL <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">var</span> musicRequest <span class=\"token operator\">=</span> <span class=\"token function\">URLRequest</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> musicURL<span class=\"token punctuation\">)</span>\n\t\tmusicRequest<span class=\"token punctuation\">.</span>httpMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"GET\"</span>\n\t\tmusicRequest<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bearer <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>developerToken<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">,</span> forHTTPHeaderField<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">)</span>\n\t\tmusicRequest<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span>userToken<span class=\"token punctuation\">,</span> forHTTPHeaderField<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Music-User-Token\"</span><span class=\"token punctuation\">)</span>\n\t\t\n\t\t<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> await <span class=\"token builtin\">URLSession</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> musicRequest<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">let</span> songs <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">SongDatum</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> songs<span class=\"token punctuation\">.</span>data\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// SongMdoel.swift</span>\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">SongDatum</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Song</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">let</span> meta<span class=\"token punctuation\">:</span> <span class=\"token builtin\">SongMeta</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Song</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\t<span class=\"token keyword\">let</span> type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeEnum</span>\n\t<span class=\"token keyword\">let</span> attributes<span class=\"token punctuation\">:</span> <span class=\"token builtin\">SongAttributes</span>\n\t<span class=\"token keyword\">let</span> href<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">SongAttributes</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> name<span class=\"token punctuation\">,</span> albumName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\t<span class=\"token keyword\">let</span> genreNames<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">let</span> artwork<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Artwork</span>\n\t<span class=\"token keyword\">let</span> hasLyrics<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span>\n\t<span class=\"token keyword\">let</span> artistName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\t<span class=\"token keyword\">let</span> durationInMillis<span class=\"token punctuation\">,</span> discNumber<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n\t<span class=\"token keyword\">let</span> playParams<span class=\"token punctuation\">:</span> <span class=\"token builtin\">SongPlayParams</span>\n\t<span class=\"token keyword\">let</span> trackNumber<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n\t<span class=\"token keyword\">let</span> releaseDate<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\t<span class=\"token keyword\">let</span> contentRating<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Artwork</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\t<span class=\"token keyword\">let</span> height<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">SongPlayParams</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> reportingID<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n\t<span class=\"token keyword\">let</span> catalogID<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\t<span class=\"token keyword\">let</span> kind<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Kind</span>\n\t<span class=\"token keyword\">let</span> reporting<span class=\"token punctuation\">,</span> isLibrary<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span>\n\n\t<span class=\"token keyword\">enum</span> <span class=\"token builtin\">CodingKeys</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">CodingKey</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> reportingID <span class=\"token operator\">=</span> <span class=\"token string\">\"reportingId\"</span>\n\t\t<span class=\"token keyword\">case</span> catalogID <span class=\"token operator\">=</span> <span class=\"token string\">\"catalogId\"</span>\n\t\t<span class=\"token keyword\">case</span> id<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">,</span> reporting<span class=\"token punctuation\">,</span> isLibrary\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token builtin\">Kind</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> song <span class=\"token operator\">=</span> <span class=\"token string\">\"song\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token builtin\">TypeEnum</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> librarySongs <span class=\"token operator\">=</span> <span class=\"token string\">\"library-songs\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">SongMeta</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> total<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>생각보다 관련 자료가 많지 않고 JWT를 처음 사용하면서 조금 어려웠던 부분들이 있었지만 그래서 더욱 재밌었고 꼭 해내겠다는 오기가 생기기도 한 것 같습니다..ㅎ</p>\n<p>API를 요청하고 반환 값을 확인하는 방법은 이것으로 끝이고 실제로 프로젝트에서 활용하기 위해 ViewModel과 Combine을 사용했습니다. 관련 내용은 다음에 자세하게 포스팅 하도록 하겠습니다!</p>\n<p>참고 사이트</p>\n<p><a href=\"https://developer.apple.com/documentation/applemusicapi\">https://developer.apple.com/documentation/applemusicapi</a></p>","frontmatter":{"date":"August 12, 2022","title":"Swift Apple MusicKit 활용하기","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-apple-music-kit/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://woo0dev.github.io","comments":{"utterances":{"repo":"woo0dev/woo0dev.github.io"}}}}},"pageContext":{"slug":"/swift-grammar/swift-navigation-screen-transition/","nextSlug":"/swift-grammar/swift-apple-music-kit/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}