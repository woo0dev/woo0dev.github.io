{"componentChunkName":"component---src-templates-blog-template-js","path":"/swift-grammar/swift-enum/","result":{"data":{"cur":{"id":"97e5bc92-2c71-5e7e-a350-d568eae1c290","html":"<h1 id=\"열거형이란\" style=\"position:relative;\"><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%B4%EB%9E%80\" aria-label=\"열거형이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>열거형이란?</h1>\n<p>연관성이 있는 값을 모아 놓은 것을 말한다.</p>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token builtin\">CompassPoint</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> north\n    <span class=\"token keyword\">case</span> south\n    <span class=\"token keyword\">case</span> east\n    <span class=\"token keyword\">case</span> west\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">enum</span> <span class=\"token builtin\">CompassPoint</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> north<span class=\"token punctuation\">,</span> south<span class=\"token punctuation\">,</span> east<span class=\"token punctuation\">,</span> west\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> direction <span class=\"token operator\">=</span> <span class=\"token builtin\">CompassPoint</span><span class=\"token punctuation\">.</span>east\ndirection <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>west</code></pre></div>\n<p>위와 같이 연관된 항목들을 선언할 수 있다. 두번째 열거형과 같이 한 줄로 작성해도 된다. 각 항목은 그 자체가 고유값이 된다.\n열거형의 항목을 가진 변수를 선언할 수 있고 값 변경도 가능하다.</p>\n<p>switch 활용 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">switch</span> direction <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>north<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"north\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>south<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"south\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>east<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"east\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>west<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"west\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>열거형의 각 항목들은 그 자체로 고유한 값으로 쓸 수 있지만 원시값을 가지게 할 수 있다. 이 말은 특정 타입으로 지정된 값을 가질 수 있다는 말이다.</p>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token builtin\">CompassPoint</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> north <span class=\"token operator\">=</span> <span class=\"token string\">\"북\"</span>\n    <span class=\"token keyword\">case</span> south <span class=\"token operator\">=</span> <span class=\"token string\">\"남\"</span>\n    <span class=\"token keyword\">case</span> east <span class=\"token operator\">=</span> <span class=\"token string\">\"동\"</span>\n    <span class=\"token keyword\">case</span> west <span class=\"token operator\">=</span> <span class=\"token string\">\"서\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> direction <span class=\"token operator\">=</span> <span class=\"token builtin\">CompassPoint</span><span class=\"token punctuation\">.</span>east\ndirection <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>west\n<span class=\"token keyword\">switch</span> direction <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>north<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">.</span>rawValue<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>south<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">.</span>rawValue<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>east<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">.</span>rawValue<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>west<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">.</span>rawValue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"서\" 출력</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 열거형에 타입을 지정해주고 각 항목에 원시값을 할당하면 switch 구문과 같이 rawValue를 통해 원시값을 가져올 수 있다.\n반대로 원시값을 이용해 변수를 선언할 수도 있다.</p>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> direction2 <span class=\"token operator\">=</span> <span class=\"token function\">CompassPoint</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token string\">\"남\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// south</span></code></pre></div>\n<p>CompassPoint의 매개변수로 rawValue를 넘겨주게되면 해당 원시값을 가진 항목으로 변수를 선언할 수 있다.\n열거형은 연관값도 가질 수 있다.</p>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token builtin\">PhoneError</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> unknown\n    <span class=\"token keyword\">case</span> <span class=\"token function\">batteryLow</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> <span class=\"token builtin\">PhoneError</span><span class=\"token punctuation\">.</span><span class=\"token function\">batteryLow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"배터리가 곧 방전됩니다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">switch</span> error <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">batteryLow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>unknown<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"알 수 없는 에러입니다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>연관값을 주려면 항목 옆에 소괄호()를 붙여주면 된다. 열거형의 항목이 연관값을 가진다고 모든 항목이 연관값을 가질 필요는 없다.\nswitch를 활용해 연관값을 출력할 수 있다.</p>","excerpt":"열거형이란? 연관성이 있는 값을 모아 놓은 것을 말한다. 예시 위와 같이 연관된 항목들을 선언할 수 있다. 두번째 열거형과 같이 한 줄로 작성해도 된다. 각 항목은 그 자체가 고유값이 된다.\n열거형의 항목을 가진 변수를 선언할 수 있고 값 변경도 가능하다. switch 활용 예시 열거형의 각 항목들은 그 자체로 고유한 값으로 쓸 수 있지만 원시값을 가지게 할 수 있다. 이 말은 특정 타입으로 지정된 값을 가질 수 있다는 말이다. 예시 위와 같이 열거형에 타입을 지정해주고 각 항목에 원시값을 할당하면 switch 구문과 같이 rawValue를 통해 원시값을 가져올 수 있다.\n반대로 원시값을 이용해 변수를 선언할 수도 있다. 예시 CompassPoint의 매개변수로 rawValue를 넘겨주게되면 해당 원시값을 가진 항목으로 변수를 선언할 수 있다.\n열거형은 연관값도 가질 수 있다. 예시 연관값을 주려면 항목 옆에 소괄호()를 붙여주면 된다. 열거형의 항목이 연관값을 가진다고 모든 항목…","frontmatter":{"date":"December 29, 2021","title":"Swift 열거형","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-enum/"}},"next":{"id":"9c0bb3df-6e87-5e59-b496-875c59d7e167","html":"<h1 id=\"extension익스텐션이란\" style=\"position:relative;\"><a href=\"#extension%EC%9D%B5%EC%8A%A4%ED%85%90%EC%85%98%EC%9D%B4%EB%9E%80\" aria-label=\"extension익스텐션이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extension(익스텐션)이란?</h1>\n<p>기존의 클래스, 구조체, 열거형, 프로토콜애 새로운 기능을 추가하는 기능 (기존의 있는 기능을 오버라이딩할 순 없다.)</p>\n<h3 id=\"익스텐션이-타입에-추가할-수-있는-기능\" style=\"position:relative;\"><a href=\"#%EC%9D%B5%EC%8A%A4%ED%85%90%EC%85%98%EC%9D%B4-%ED%83%80%EC%9E%85%EC%97%90-%EC%B6%94%EA%B0%80%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EA%B8%B0%EB%8A%A5\" aria-label=\"익스텐션이 타입에 추가할 수 있는 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>익스텐션이 타입에 추가할 수 있는 기능</h3>\n<ul>\n<li>연산 타입 프로퍼티 / 연산 인스턴스 프로퍼티</li>\n<li>타입 메서드 / 인스턴스 메서드</li>\n<li>이니셜라이저</li>\n<li>서브스크립트</li>\n<li>중첩 타입</li>\n<li>특정 프로토콜을 준수할 수 있도록 기능 추가</li>\n</ul>\n<h3 id=\"사용법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용법</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">SomeType</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 추가 기능</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> isEven<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">var</span> isOdd<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> number<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nnumber<span class=\"token punctuation\">.</span>isEven <span class=\"token comment\">// false</span>\nnumber<span class=\"token punctuation\">.</span>isOdd <span class=\"token comment\">// true</span></code></pre></div>\n<p>짝수, 홀수를 판별하는 기능을 추가한 extension이다.\n참고로 extension은 연산프로퍼티는 추가할 수 있지만, 저장프로퍼티는 추가할 수 없다. 또 타입에 정의되어 있는 기존의 프로퍼티에 프로퍼티 감시자를 추가할 수 없다.</p>","frontmatter":{"date":"December 28, 2021","title":"Swift Extension","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-extension/"}},"prev":{"id":"c66a2b99-1a9e-5c1d-adc3-0715895b8eef","html":"<h1 id=\"옵셔널-체이닝이란\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%85%94%EB%84%90-%EC%B2%B4%EC%9D%B4%EB%8B%9D%EC%9D%B4%EB%9E%80\" aria-label=\"옵셔널 체이닝이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵셔널 체이닝이란?</h1>\n<p>옵셔널에 속해 있는 nil 일지도 모르는 프로퍼티, 메서드, 서브스크립션 등을 가져오거나 호출할 때 사용할 수 있는 일련의 과정</p>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Developer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Company</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">var</span> developer<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Developer</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> developer <span class=\"token operator\">=</span> <span class=\"token function\">Developer</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"han\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> company <span class=\"token operator\">=</span> <span class=\"token function\">Company</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"woo\"</span><span class=\"token punctuation\">,</span> developer<span class=\"token punctuation\">:</span> developer<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>company<span class=\"token punctuation\">.</span>developer<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>company<span class=\"token punctuation\">.</span>developer<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// error</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>company<span class=\"token punctuation\">.</span>developer<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Optional(\"han\")</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>company<span class=\"token punctuation\">.</span>developer<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// han</span></code></pre></div>\n<p>Company 구조체 안에 nil이 할당될 수 있는 Developer타입 옵셔널 변수 developer를 선언하고 해당 값을 꺼내올 때는 항상 옵셔널 바인딩을 해야한다. 옵셔널 체이닝을 할 때 ?를 쓰면 값이 nil일 수도 있기 때문에 옵셔널에 감싼채로 출력이 되고, !를 쓰면 옵셔널을 강제로 해제하여 출력된다. (강제 해제 방법은 되도록 쓰지 않는 것이 좋다. nil일 때 에러 발생.)</p>","frontmatter":{"date":"December 30, 2021","title":"Swift 옵셔널 체이닝","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/swift-grammar/swift-optional-chaining/"}},"site":{"siteMetadata":{"siteUrl":"https://woo0dev.github.io","comments":{"utterances":{"repo":"woo0dev/woo0dev.github.io"}}}}},"pageContext":{"slug":"/swift-grammar/swift-enum/","nextSlug":"/swift-grammar/swift-extension/","prevSlug":"/swift-grammar/swift-optional-chaining/"}},"staticQueryHashes":["1073350324","2938748437"]}