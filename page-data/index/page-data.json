{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"7b7f1dfb-4d82-5238-898f-1ce81cc76525","excerpt":"Extension(익스텐션)이란? 기존의 클래스, 구조체, 열거형, 프로토콜애 새로운 기능을 추가하는 기능 (기존의 있는 기능을 오버라이딩할 순 없다.) 익스텐션이 타입에 추가할 수 있는 기능 연산 타입 프로퍼티 / 연산 인스턴스 프로퍼티 타입 메서드 / 인스턴스 메서드 이니셜라이저 서브스크립트 중첩 타입 특정 프로토콜을 준수할 수 있도록 기능 추가 사용법 예시 짝수, 홀수를 판별하는 기능을 추가한 extension이다.\n참고로 extension은 연산프로퍼티는 추가할 수 있지만, 저장프로퍼티는 추가할 수 없다. 또 타입에 정의되어 있는 기존의 프로퍼티에 프로퍼티 감시자를 추가할 수 없다.","frontmatter":{"categories":"iOS","title":"Swift Extension","date":"December 28, 2021"},"fields":{"slug":"/swift-grammar/swift-extension/"}}},{"node":{"id":"d6be0bf3-9121-5d9b-b861-de989e9c1c17","excerpt":"타입 캐스팅이란? 인스턴스의 타입을 확인하거나 어떠한 클래스의 인스턴스를 해당 클래스 계층 구조의 슈퍼 클래스나 서브 클래스로 취급하는 방법 타입 캐스팅 연산자\nis - 값의 타입을 확인할 때 사용한다.\nas - 값의 타입을 다른 타입으로 지정할 때 사용한다. 자세한 건 예시를 보며 알아보자\nis, as를 사용하기에 앞서 먼저 클래스들을 생성한다. 위 코드는 MediaItem Class를 상속받는 Movie Class와 Song Class를 만들어주었다. 다음은 MediaItem을 담는 배열을 만들었다. 원래라면 같은 타입만 하나의 배열에 저장할 수 있지만 현재는 Movie Class와 Song Class 모두 MediaItem을 상속받고 있기 때문에 MediaItem 타입의 매열을 만들어 줄 수 있다. is 예시 library 배열 안에 있는 값의 타입을 확인하고 개수를 세는 코드이다.\nif문을 보면 item is Movie 라고 되어있는데 이것은 현재 item이 Movie냐? …","frontmatter":{"categories":"iOS","title":"Swift 타입캐스팅","date":"December 23, 2021"},"fields":{"slug":"/swift-grammar/swift-typecasting/"}}},{"node":{"id":"05f11148-136b-58cf-b90a-4cffdf15d2fa","excerpt":"상속(Inheritance)이란? 부모가 자식에게 재산을 물려주는 행위\n보통 부모클래스가 자식클래스에게 기능을 물려주는 행위라고 보면 된다. 클래스 종류 부모클래스(SuperClass) 자식클래스(SubClass) 기본클래스(BasicClass)\n상속없이 평소에 쓰던 클래스들을 BasicClass라고 볼 수 있다. 사용법 class 클래스 이름: 부모클래스 이름 {\n    하위클래스 정의\n} 예시 위와 같이 VehicleClass를 상속받은 BicycleClass 인스턴스는 VehicleClass의 프로퍼티에 접근하여 값을 확인 및 변경이 가능한 것을 볼 수 있다. 오버라이딩 상속받는 부모클래스에 있는 함수와 같은 이름의 함수를 만들 때 사용한다. 예시 위와 같이 SuperClass에 있는 makeNoise함수와 이름이 같은 함수를 Train에서 정의할 때 override 키워드를 사용하여 같은 이름의 함수를 만들 수 있다. 만약 오버라이딩을 한 후에 SubClass에서 Super…","frontmatter":{"categories":"iOS","title":"Swift Inheritance(상속)","date":"December 22, 2021"},"fields":{"slug":"/swift-grammar/swift-Inheritance/"}}},{"node":{"id":"bd77a445-0524-5f5f-ba4c-314a465abbd1","excerpt":"프로토콜이란? 특정 역할을 하기 위한 메서드, 프로퍼티, 기타 요구사항 등의 청사진 사용법 protocol 이름 {\n} 예시 protocol을 채택해 만든 struct이다. class에도 같은 방법으로 프로토콜을 채택할 수 있지만 class가 상속받는 SuperClass가 있다면 SuperClass를 맨 앞에 써야한다. 프로토콜에서 변수를 선언할 때는 항상 var(변수)로 선언해야 하며 읽기,쓰기 전용인지 읽기 전용인지 정의할 수 있다. 프로토콜에서 타입 프로퍼티를 요구하려면 항상 static 키워드를 사용해야 한다. 위와 같이 함수를 사용할 수 있다. class에서 프로토콜의 생성자 요구사항을 준수하려면 required 식별자가 꼭 필요하다. (만약 class 자체가 상속받을 수 없는 finalClass라면 required 식별자가 필요없다.)\n(구조체에서는 필요없다.)","frontmatter":{"categories":"iOS","title":"Swift Protocol","date":"December 22, 2021"},"fields":{"slug":"/swift-grammar/swift-protocol/"}}},{"node":{"id":"346d0c60-9ce0-5978-ae2b-3549385bed00","excerpt":"클래스와 구조체의 차이 클래스와 구조체의 공통점 값을 저장할 프로퍼티를 선언할 수 있습니다. 함수적 기능을 하는 메서드 선언 할 수 있습니다. 내부 값에 .을 사용하여 접근할 수 있습니다. 생성자를 사용해 초기 상태를 설정할 수 있습니다. extension을 사용하여 기능을 확장할 수 있습니다. Protocol을 채택하여 기능을 설정할 수 있습니다. 클래스와 구조체의 차이점 클래스 참조 타입 ARC로 메모리를 관리 상속이 가능 타입 캐스팅을 통해 런타임에서 클래스 인스턴스의 타입을 확인할 수 있음 deinit을 사용하여 클래스 인스턴스의 메모리 할당을 해제할 수 있음 같은 클래스 인스턴스를 여러 개의 변수에 할당한 뒤 값을 변경 시키면 모든 변수에 영향을 줌(메모리가 복사 됨) 구조체 값 타입 구조체 변수를 새로운 변수에 할당할 때마다 새로운 구조체가 할당됩니다. 즉 같은 구조체를 여러 개의 변수에 할당한 뒤 값을 변경시키더라도 다른 변수에 영향을 주지 않음(값 자체를 복사) 값타…","frontmatter":{"categories":"iOS","title":"Swift 클래스와 구조체의 차이","date":"December 21, 2021"},"fields":{"slug":"/swift-grammar/swift-class-and-struct-diff/"}}},{"node":{"id":"2a501e8e-6c20-53a0-802d-488e3dd8b556","excerpt":"Property(프로퍼티) 프로퍼티의 종류 저장 프로퍼티 연산 프로퍼티 타입 프로퍼티 저장 프로퍼티 저번에 클래스의 인스턴스는 참조타입이고 구조체의 인스턴스는 값타입이라고 했었는데 때문에 클래스는 클래스의 인스턴스가 상수로 선언되어도 클래스 내의 프로퍼티가 변수로 선언되었다면 값을 변경할 수 있지만, 구조체는 구조체의 인스턴스가 상수로 선언되면 구조체의 인스턴스 내의 프로퍼티가 변수로 선언되어도 값을 변경할 수 없다.   구조체 예시 클래스 예시 연산 프로퍼티\n저장 프로퍼티는 클래스나 구조체에서만 사용 가능했지만 연산 프로퍼티는 클래스, 구조체, 열거형에서 사용 가능하다. 연산 프로퍼티는 값을 직접적으로 저장하지 않는 대신에 getter와 setter를 사용해서 다른 프로퍼티와 값들에 직접적으로 접근할 수 있다. (getter만 쓰고 setter를 쓰지 않으면 읽기 전용 프로퍼티로 사용할 수 있다.) 프로퍼티 옵저버\n프로퍼티 옵저버는 프로퍼티 값의 변화를 감지하고 반영한다.\n새로운…","frontmatter":{"categories":"iOS","title":"Swift 프로퍼티(Property)","date":"December 20, 2021"},"fields":{"slug":"/swift-grammar/swift-property/"}}},{"node":{"id":"76a19570-a928-5b41-99ee-1e0dbc130662","excerpt":"클래스와 구조체 프로그래머가 데이터를 용도에 맞게 표현하고자 할 때 용이하다. 프로퍼티와 메서드를 사용해서 구조화된 데이터와 기능을 가질 수 있어 하나의 새로운 사용자 정의 데이터타입을 만들어 준다. 사용법은 거의 같다. 하지만 다른 점이 있다. 구조체의 인스턴스는 값타입이고 클래스의 인스턴스는 참조타입이다. 구조체 정의\nstruct 구조체 이름 {\n    프로퍼티와 메서드\n} 구조체 예시 프로퍼티 값 변경 함수 사용 클래스 클래스 정의\nclass 클래스 이름 {\n    프로퍼티와 메서드\n} 예시 초기화(Initialization)란? 클래스 구조체 또는 열거형의 인스턴스를 사용하기 위한 준비 과정 예시 초기화 해제(Deinitialization) 이니셜라이저와 반대 역할을 한다.\n인스턴스가 메모리에서 해제되기 직전에 호출된다.\n클래스 인스턴스와 관련하여 원하는 정리 작업을 구현할 수 있다. \n클래스 인스턴스에만 구현할 수 있다.\n예시 인스턴스에 nil이 들어가면 deinit가 호…","frontmatter":{"categories":"iOS","title":"Swift 클래스와 구조체","date":"December 16, 2021"},"fields":{"slug":"/swift-grammar/swift-class-and-struct/"}}},{"node":{"id":"7a112d24-d204-59db-b752-1e9040d1742f","excerpt":"옵셔널이란? 값이 있을 수도 있고 없을 수도 있다. 예시) 이 두 코드는 얼핏 보기엔 ‘값이 없는 건 똑같은 거 아니야?‘라고 생각할 수 있지만 첫번째 코드는 빈 문자열이 들어있고 두번째 코드는 값이 없는 상태로 둘은 엄연히 다른 코드이다. (nil은 다른 언어에서의 null과 같다.) nil을 할당할 수 있는 것을 바로 옵셔널이라고 하는데 위 코드처럼 타입 뒤에 ?를 붙여 사용하면 된다. 옵셔널로 선언된 변수의 초기값을 선언하지 않으면 기본값은 nil이 들어간다. 물론 타입에 맞는 값으로 초기화하여 선언할 수 있다. 주의할 점은 아래와 같이 옵셔널이 아닌 변수에 옵셔널을 할당하려고 하면 에러가 발생한다. 옵셔널 변수에 nil이 아닌 값이 할당되어있는 상태여도 마찬가지이다. 이유는 옵셔널 변수에는 지금 값이 있더라도 언제든지 nil이 할당될 수 있기 때문이다. 옵셔널이 아닌 변수에 nil이 들어가면 에러가 생기는데 그런 상황을 미연에 방지하기 위해서이다. 옵셔널 바인딩이란? 옵셔널…","frontmatter":{"categories":"iOS","title":"Swift 옵셔널과 옵셔널 바인딩","date":"December 15, 2021"},"fields":{"slug":"/swift-grammar/swift-optional/"}}},{"node":{"id":"450cbb93-1be0-5fb1-b50f-91229cd8dfb4","excerpt":"반복문이란? 반복적으로 코드가 실행되게 만드는 구문. 반복문 구문 for-in\n사용 방법\nfor 루프상수 in 순회대상 {\n실행구문\n}\n루프상수는 반복문 내에서만 사용가능하다. 범위 연산자를 사용한 예시) 배열을 사용한 예시) while\n사용 방법\nwhile 조건식 {\n실행구문\n} 예시) 5가 들어있었던 변수 number가 10보다 작을 때만 1을 더하는 while문이다. repeat-while (다른 언어의 do-while)\n조건을 충족하지 못하더라도 무조건 한 번이상 실행되는 반복문.\n사용 방법\nrepeat {\n실행구문\n} while 조건식 예시) x는 6이고 조건은 6보다 작을 때 실행되도록 하였지만 repeat-while문은 무조건 한 번은 실행되기 때문에 8이 출력되는 것을 확인할 수 있다.","frontmatter":{"categories":"iOS","title":"Swift 반복문","date":"December 04, 2021"},"fields":{"slug":"/swift-grammar/swift-loop/"}}},{"node":{"id":"00fc123b-0623-59eb-89e2-ff77b255f910","excerpt":"조건문이란? 주어진 조건에 따라서 어플리케이션을 다르게 동작하도록 하는 것을 말한다. 조건문 구문 if\n사용법\nif 조건문1 {\n실행구문\n} else if 조건문2 {\n실행구문\n} else {\n실행구문\n}\n예시 if 구문은 위처럼 사용하게 되는데 조건이 많다면 if-else if-else 방식으로 여러 조건을 사용할 수 있다. 필요하지 않다면 else-if, else는 생략해도 된다. switch\n사용법\nswitch 조건대상 {\ncase 조건1:\n실행구문\ncase 조건2:\n실행구문\ndefault:\n실행구문\n}\ncase는 조건을 검사하기 위함이고 default는 모든 조건에 해당하지 않았을 때 실행된다.\n예시 switch 구문은 위처럼 사용하게 되는데 여러가지 조건을 검사하기 위해 사용된다. switch 구문에서 범위 연산자를 사용한 예시.","frontmatter":{"categories":"iOS","title":"Swift 조건문","date":"December 03, 2021"},"fields":{"slug":"/swift-grammar/swift-conditional/"}}},{"node":{"id":"0cff9eaf-c0d7-562b-a2b4-045702b2cda4","excerpt":"컬렉션 타입(Collection Type)이란? 컬렉션 타입은 데이터들의 집합 묶음이다.\nSwift에는 3개의 컬렉션 타입이 존재하는데 Array, Dictionary, Set이다. Array 데이터 타입의 값들을 순서대로 저장하는 리스트 빈 Array 선언 방법 값 추가 특정 인덱스에 값 추가 특정 인덱스의 값 삭제 특정 인덱스 값 확인 Dictionary 순서없이 키(Key)와 값(Value) 한 쌍으로 데이터를 저장하는 컬렉션 타입 빈 Dictionary 선언 방법 키와 값 추가 이미 존재하는 키의 값 변경 특정 키 삭제 Set 같은 데이터 타입의 값을 순서없이 저장하는 리스트\n(중복 데이터를 허용하지 않음) 빈 Set 선언 방법 (축약 문법을 허용하지 않음) 값 추가 중복 값을 허용하지 않기 때문에 같은 값을 여러번 추가해도 하나만 존재하는 것을 확인할 수 있다. 값 삭제","frontmatter":{"categories":"iOS","title":"Swift Collection Type","date":"December 02, 2021"},"fields":{"slug":"/swift-grammar/swift-collection/"}}},{"node":{"id":"a3e5f94d-40a5-5b8e-8039-d19a91cfe8aa","excerpt":"함수란? 함수는 작업의 가장 작은 단위이자 코드의 집합이다. 함수 사용 방법 함수 사용 예시 매개변수가 없는 함수 반환 값이 없는 함수 매개변수에 기본값이 주어지는 함수 전달인자 레이블을 사용하는 함수 전달인자 레이블을 사용하면 사용자 입장에서 매개변수의 역할을 조금 더 명확하게 해줄 수 있다. 전달인자 레이블을 사용하지 않기 위해서는 위처럼 파라미터 이름 앞에 언더바를 붙여주면 함수를 사용할 때 파라미터 이름을 쓰지 않아도 된다. 가변 매개변수 사용 함수 위처럼 가변 매개변수를 사용할 매개변수 타입 뒤에 …을 붙이면 해당 매개변수는 가변 매개변수가 된다.\n가변 매개변수로 전달받은 값은 배열의 형태로 넘어오는 것을 확인할 수 있다.\n주의할 점은 가변 매개변수는 함수 당 하나만 선언이 가능하다. 참고\nhttps://fastcampus.co.kr/dev_online_iosappfinal","frontmatter":{"categories":"iOS","title":"Swift 함수란?","date":"December 01, 2021"},"fields":{"slug":"/swift-grammar/swift-function/"}}},{"node":{"id":"16a22c68-51d1-5182-b906-f9192981564b","excerpt":"Playground란? WWDC 2016 컨퍼런스에서 처음 발표된 Apple Inc.에서 개발한 Swift 프로그래밍 언어를 위한 교육 도구 및 개발 환경이다.   매우 간단하게 직접 코드를 짜면서 Swift언어를 배울 수 있는 방법이지만 나는 이것을 최근에 알았다..\n(그 전에는 커맨드라인을 사용해왔다.) Xcode에서 Playground를 생성하는 법 Xcode 화면의 왼쪽 상단에 보이는 File → New → Playground 순서대로 선택하여 원하는 폴더에 생성하면 된다.  기본으로 제공되는 코드를 실행하면 아래와 같이 나오는 것을 확인할 수 있다.   정말 편하다고 느낀 것을 코드 왼쪽에 보면 실행버튼이 있는데 해당 버튼을 누르면 따로 print처럼 사용하지 않아도 해당 코드의 결과를 왼쪽에서 바로 보여주기 때문에 편할 것 같다.","frontmatter":{"categories":"iOS","title":"Xcode에서 Playground 생성하기","date":"November 28, 2021"},"fields":{"slug":"/swift-grammar/xcode-playground-create/"}}},{"node":{"id":"4cd03cc5-d2cc-5125-b55d-032d04fe25a3","excerpt":"Swift의 네이밍 규칙 네이밍 규칙에는 크게 Lower Camel Case와 Upper Camel Case 두가지가 있는데 언제 어떤 방식을 사용하는지 알아보자 Lower Camel Case function method variable constent Upper Camel Case class struct enum extension 변수 및 상수 선언 방법과 데이터 타입 변수 var 추후에 var로 선언된 변수의 값을 바꿀 수 있다. 타입 추론 값의 타입이 명확하다면 타입은 생략이 가능하다. 상수 let 값이 할당된 후에는 변경이 불가능하다. 하지만 선언할 때 값을 할당하지 않고 따로 값을 할당해줄 수 있다. 데이터 타입 Character - 유니코드를 사용하여 한글자만 할당 가능한 타입 (ex> ‘a’, ‘가’, ’😀’ 등) String - 문자열 Int - 64bit 정수형 UInt - 부호가 없는 64bit 정수형 Float - 32bit 부동 소수점 Double - 64bi…","frontmatter":{"categories":"iOS","title":"Swift 네이밍 규칙 및 기본데이터 타입","date":"November 26, 2021"},"fields":{"slug":"/swift-grammar/swift-naming/"}}},{"node":{"id":"109d22d4-e1b8-554f-80f1-1ec9224a7e95","excerpt":"SwiftUI란? 공식사이트에서는 “SwiftUI는 최소한의 코드만으로 Swift의 성능을 사용하여 모든 Apple 플랫폼에서 사용할 수 있는 앱을 개발 가능하다” 라고 나오지만 어떤 것인지 더 자세히 공부하기 위해 포스팅을 해보려고 한다. 먼저 SwiftUI는 UIKit 위에서 빌드되는 프레임워크로 선언형 방식의 구조를 가지고 있다.\nSwiftUI 프로젝트를 생성하면 SceneDelegate.swift, ContentView.swift, Preview Content라는 폴터가 생기는데 이것들은 무엇일까. SceneDelegate는 멀티 윈도우 같은 기능을 지원하기 위해 Delegate이다. AppDelegate와는 달리 각 화면의 인스턴스 단위로 작동시킬 수 있다. ContentView는 제일 먼저 출력되는 View로 SceneDelegate에 Scene 메서드에 선언되어 있다. Preview Content는 Xcode에서 Simulator 없이 미리보기 화면을 제공하는 Canv…","frontmatter":{"categories":"iOS","title":"SwiftUI 시작하기","date":"November 24, 2021"},"fields":{"slug":"/SwiftUI-structure/"}}},{"node":{"id":"0307f744-a432-5e75-8345-dea6a767b91d","excerpt":"프로퍼티 래퍼(Property Wrapper)란 무엇인가? 프로퍼티 래퍼는 Swift5.1부터 추가된 어노테이션으로 사용자가 별도의 코딩 없이 어노테이션만 선언해도 뷰에서 수정이나 읽기가 가능하도록 캡슐화를 대신해준다. 변수 앞에 $를 붙이면 프로퍼티 래퍼 자체를 받기 때문에 WrapperValue 자체를 변경할 수 있다. @State란 무엇인가? @State 변수에 변화가 일어나면 Viewfmf 다시 그려준다. 하지만 private하기 때문에 View의 body안에서만 접근해야한다. 따라서 현재 화면에서 잠깐 사용할 목적으로 사용하는 것이 적합하다.\n@State 변수는 Heap에 할당되고 View에는 포인터만 있는 방식으로 되어있다. 그렇기 때문에 변화가 감지되면 새로운 View로 포인터를 옯기는 방식으로 View의 상태를 저장하고 변경한다. @Binding이란 무엇인가? @State 변수에 를 붙여 @Binding 변수와 연결되어있는 상태에서 @Binding 변수의 값을 바꾸면…","frontmatter":{"categories":"iOS","title":"SwiftUI @State, @Binding, @ObservedObject","date":"November 24, 2021"},"fields":{"slug":"/SwiftUI-Binding/"}}},{"node":{"id":"398f4221-3752-5668-987a-f093ba5df437","excerpt":"Notification Notification Center를 통해 등록된 모든 Observer에게 정보를 브로드캐스트하는 컨테이너. NotificationCenter 동작 방식 특정 객체가 NotificationCenter에 등록된 Event를 발생시키면 해당 Event를 처리할 것이라고 등록된 Observer들이 Event에 대한 행동을 취하는 것이 NotificationCenter가 동작하는 방식이다. 이렇게 특정 객체가 Event를 발생시키는 것을 Post라고 한다. Listener (observer) : notifications를 감지 Sender : 필요할 때 notifications 를 보내주는 역할 itself : notification center 그 자체. Observer가 관찰 시작 → 작업이 발생하면 Sender가 Post → Observer selector 실행","frontmatter":{"categories":"iOS","title":"NotificationCenter 동작 방식과 활용 방안","date":"October 21, 2021"},"fields":{"slug":"/NotificationCenter/"}}},{"node":{"id":"46839cd1-209e-5b5b-95fe-772b645767f6","excerpt":"Delegate란? Delegate 란 하나의 객체가 모든 일을 처리하는 것이 아니라 처리해야 할 일 중 일부를 다른 객체에게 위임하는 것이다.\n객체의 행동을 단순화 시키고 객체간 결합성을 최소화하는 장점이 있다. Retain Retain cycle은 메모리가 해제되지 않고 유지되어 누수가 생기는 현상을 말하며 두 객체간의 참조가 강한 순환참조가 생겨 메모리에서 해제되지 않는 현상이다.\n따라서 Delegate 또한 객체간의 참조가 이루어 지기 때문에 retain cycle 현상이 발생할 수 있다.","frontmatter":{"categories":"iOS","title":"Delegate란 무언인가 설명하고, retain 되는지 안되는지 그 이유를 함께 설명하시오.","date":"October 20, 2021"},"fields":{"slug":"/delegate-retain/"}}},{"node":{"id":"b35fce32-172c-5b1a-a05f-63b6a9c09597","excerpt":"Foundation이란? Apple에서 제공하는 기본 프레임워크인 코코아 터치 프레임워크에 포한되어 있는 프레임워크이다. Foundation 프레임워크는 데이터 스토리지 및 지속성, 텍스트 처리, 날짜 및 시간 계산, 정렬 및 필터링, 네트워킹을 포함한 애플리케이션과 프레임워크에 대한 기본 기능 계층을 제공한다. Foundation에서 정의한 클래스, 프로토콜, 데이터 유형은 MacOS, iOS, watchOS, tvOS SDK 전반에 걸쳐 사용된다. 포함된 클래스 Collections(Sorting, Type…) Strings  Dates and times  URLs(Networking)  XML data  Ports and sockets  Notification Center interaction","frontmatter":{"categories":"iOS","title":"Foundation Kit은 무엇이고 포함되어 있는 클래스들은 어떤 것이 있을까?","date":"October 19, 2021"},"fields":{"slug":"/FoundationKit/"}}},{"node":{"id":"e0c510df-43bf-5b1a-bd4f-66d23c631b58","excerpt":"UIKit UI(User Interface) Kit Framework는 사용자 인터페이스를 관리하고, 이벤트를 처리하는게 주 목적인 Framework이다.\nmacOS에서는 Application Kit(AppKit) Framework를 사용했었지만 iOS로 넘어오면서 UIKit으로 대체되었다.\nUIKit에서 주로 처리하는 사용자 이벤트로는 제스처 처리, 애니메이션, 그림 그리기, 이미지 처리, 텍스트 처리 등이 있다.\n또한 테이블뷰, 슬라이더, 버튼, 텍스트 필트, Alert 창 등 Application의 화면을 구성하는 요소도 포함된다.\nUIViewController, UIView, UIAlertController 등 앞에 UI가 붙는 클래스들을 사용하려면 반드시 UIKit을 상속해야한다.","frontmatter":{"categories":"iOS","title":"iOS 앱을 만들고, User Interface를 구성하는 데 필수적인 프레임워크 이름은 무엇인가?","date":"October 15, 2021"},"fields":{"slug":"/iOS-UserInterface-Framework/"}}},{"node":{"id":"781a5e85-4732-5588-9f83-382773863a9f","excerpt":"GCD(Grand Central Dispatch)란? Background에서 Thread를 관리하면서 동시적으로 작업을 실행시키는 낮은 수준의 API를 제공하는 라이브러리이며,멀티 코어 프로세서 시스템에 대한 응용 프로그램 지원을 최적화하기 위해 Apple에서 개발한 기술이다. GCD의 동작 방식 작업단위는 Block(Swift에서는 Closure)이라 불리며, DispatchQueue가 이 Block들을 관리한다.\nGDC는 각 어플리케이션에서 생성된 DispatchQueue를 읽는 멀티코어 실행엔진을 가지고 있으며, 이것이 Queue에 등록된 각 작업을 꺼내 Thread에 할당하고 개발자는 내부 동작을 자세히 알 필요 없이 Queue에 작업을 넘기기만 하면 되서, Thread를 직접 생성하고 관리하는 것에 비해 관리 용이성과, 이식성, 성능 증가하게 되었습니다.\nApple 공식 문서에서도 Thread 대신 GCD를 권장한다.   DispatchQueue GCD는 App이 Bloc…","frontmatter":{"categories":"iOS","title":"GCD API의 동작 방식과 필요성","date":"October 14, 2021"},"fields":{"slug":"/GCDAPI/"}}},{"node":{"id":"593c4b7d-245e-54c1-bb1f-e2b963c575a6","excerpt":"NSOperationQueue와 GCD Queue의 차이점 iOS의 멀티스레딩 방법 NSOperationQueue : Obj-c 기반의 high-level API GCD Queue : C 기반의 row-level API NSOperationQueue NSOperation 객체의 우선순위 및 준비 상태에 따라 대기열에 있는 객체를 실행한다. Operation Queue에 추가된 작업은 작업이 완료될 때까지 대기열에 남아 있다. 작업이 추가된 후에는 대기열에서 직접 제거할 수 없다. 모든 작업이 끝나지 않은 상태에서 Opertion queue를 중지시키면 메모리 릭이 발생할 수 있다. GCD에서는 할 수 없는 기능들(재개, 취소, 중지)을 제공하지만 구현이 복잡하고 무겁다. NSOperations, NSOperationQueue를 사용할 때 오버헤드가 발생한다. KVO(Key-Value Observing) 사용이 가능하다. (GCD는 불가) operations(read only) : …","frontmatter":{"categories":"iOS","title":"NSOperationQueue와 GCD Queue의 차이점","date":"October 13, 2021"},"fields":{"slug":"/NSOperation-GCD/"}}},{"node":{"id":"acdad3c9-eba8-5f6d-8f30-c90325ffe5a6","excerpt":"앱이 In-Active 상태가 되는 시나리오를 설명하시오. Foreground In-Active와 Active를 합쳐서 Foreground라고 한다. In-Activeg App이 실행 중이지만 이벤트를 받지 않는 상태 시나리오 사용자가 앱을 실행했을 때 Not Running -> In-Active -> Active 앱 실행 도중 홈 버튼을 눌렀을 때 Active -> In-Active -> Background 앱을 다시 켰을 때 Background -> Active 앱이 백그라운드에 있다가 Suspended 상태로 전이 Active -> In-Active -> Background -> Suspended","frontmatter":{"categories":"iOS","title":"앱이 In-Active 상태가 되는 시나리오","date":"October 12, 2021"},"fields":{"slug":"/in-Active/"}}},{"node":{"id":"70c417e4-a915-507d-97bd-36fe19f7aa6c","excerpt":"SceneDelegate란? SceneDelegate는 Xcode11부터 iOS App 탬플릿 생성 시 자동으로 추가된다. iOS13 이상부터는 SceneDelegate가 AppDelegate의 일부 역할을 담당한다. 여기서 중요한 점은 window의 개념이 Scene 개념으로 대체된다는 것이다. 앱에 둘 이상의 Scene이 있을 수 있으며, 앱의 사용자 인터페이스 및 콘텐츠의 배경으로 사용된다. Scene이 있는 하나의 앱을 갖는 개념은 iOS 및 iPadOS에서 다중 창\u001c앱을 빌드할 수 있습니다.   자동으로 생성되는 SceneDelegate에는 active, resign and disconnect와 같은 친숙한 라이프사이클\u001c이벤트가 있습니다.\nSceneDelegate는 delegate를 사용하며 일반적으로 모든 장면에 응답한다는 점에 유의해야합니다. 하나의 Delegate를 정의하여 앱의 모든 Scene에서 사용합니다.   SceneDelegate에 있는 함수들 SceneDe…","frontmatter":{"categories":"iOS","title":"SceneDelegate란?","date":"October 09, 2021"},"fields":{"slug":"/scenedelegate/"}}},{"node":{"id":"cf6bbb2b-5acd-534d-b0cb-5f451e0685a9","excerpt":"애플리케이션이 실행된 직후 사용자의 화면에 보여지기 직전에 호출 애플리케이션이 최초 실행될 때 호출되는 메소드 애플리케이션이 InActive 상태로 전환되기 직전에 호출  task 일시정지, 타이머 비활성화, 일시정지(게임) 애플리케이션이 백그라운드 상태로 전환된 직후 호출 애플리케이션이 Active 상태가 되기 직전, 화면에 보여지기 직전에 호출 애플리케이션이 Active 상태로 전환된 직후 호출 애플리케이션이 종료되기 직전에 호출","frontmatter":{"categories":"iOS","title":"iOS App 상황별 Delegate Method","date":"October 05, 2021"},"fields":{"slug":"/delegate-method/"}}},{"node":{"id":"f060144e-e7da-5710-bc39-8bf446a2c626","excerpt":"iOS App 상태별 제약사항에 대해 알아보자 not Running : 앱이 실행되지 않은 상태   Foreground : App이 실행되어 클라이언트에게 보여지고 있는 상태 Inactive : 앱이 실행중이지만 아직 아무런 이벤트를 받지 않은 상태 (Foreground 상태에서 전화가 왔을 때, 잠금상태, 멀티태스킹 스크린에서는 Inactive 상태를 가진다.) Active : 앱이 실행중이며 현재 이벤트를 받고 있고 발생한 상태\u001f Background : 앱이 백그라운드에 있는 상태지만 여전히 실행중인 상태 Suspened : 앱이 백그라운드에 있고 실행되는 코드가 없는 상태 (App은 여전히 메모리에 존재하며 Suspened 상태가 될 당시의 상태를 저장하고 있지만, CPU나 배터리를 소모하지 않습니다. 언제든지 메모리 부족등의 이유로 종료됨.) 앱의 상태별 제약사항 Foreground mode는 메모리 및 기타 시스템 리소스에 높은 우선순위를 가지며 시스템은 이러한 리소스를 …","frontmatter":{"categories":"iOS","title":"iOS App 상태별 제약사항","date":"October 02, 2021"},"fields":{"slug":"/app-state/"}}},{"node":{"id":"9ba76d1f-30ea-56a5-b746-48dbdac2cf0e","excerpt":"Bounds와 Frame Bounds와 Frame의 차이를 공부하기 전에 먼저 Bounds와 Frame이 뭔지 알아보자 Bounds와 Frame은 UIView의 instance property다. Bounds와 Frame 둘 다 CGRect Type이기 때문에 origin과 size를 가진 사각형으로 그려진다. Frame SuperView(상위뷰)의 좌표시스템 안에서 View의 origin과 size를 나타낸다. 여기서 상위뷰란 한단계 상위뷰를 의미한다. 예를 들어 Frame으로 정의된 View의 origin이나 size를 출력하면 해당 View의 상위뷰 origin과 size가 출력된다. 또한 origin과 size를 수정했을 때도 마찬가지로 상위뷰의 origin과 size가 수정된다. Bounds View의 위치와 크기를 자기 자신의 좌표시스템안에서 origin와 size를 나타낸다. 예를 들어 Bounds로 정의된 View의 origin이나 size를 출력하면 해당 View의…","frontmatter":{"categories":"iOS","title":"Bounds와 Frame의 차이","date":"September 30, 2021"},"fields":{"slug":"/bounds-frame-study/"}}},{"node":{"id":"0b08f52a-f4a2-5495-a6aa-7613f485fc87","excerpt":"개발할 때 디바이스가 없으면 할 수 없는 것 하드웨어 가속도 센서, 가압계 센서, 주변광 센서, GPS 센서 기능을 사용할 수 없다. 마우스로 시뮬레이터의 터치를 하기 때문에 두 소가락으로 하는 줌인 줌아웃 등의 기능을 테스트 할 수 없다. 카메라를 사용할 수 없다. 마이크를 사용할 수 없다. 전화기능을 사용할 수 없다. API Apple의 푸시 알림 받기와 보내기 기능을 사용할 수 없다. 사진, 연락처, 캘린더에 엑세스하기 위해 개인 정보 보호 알림을 지원하지 않는다. Handoff 기능을 사용할 수 없다. MessageUI 기능을 사용할 수 없다. 그 외 맥의 성능이 아이폰의 성능보다 훨씬 뛰어나 CPU나 메모리 부담이 얼마나 되는지 알 수 없다. 내트워크 속도 태스트를 할 수 없다. 페이스 아이디는 직접 얼굴 인식은 안되지만 인식됨, 안됨 처리는 할 수 있다.","frontmatter":{"categories":"iOS","title":"iOS 개발할 때 실제 디바이스가 없으면 할 수 없는 것","date":"September 30, 2021"},"fields":{"slug":"/development-without-device/"}}},{"node":{"id":"0710e72b-bb85-5941-8a90-c32cd1733093","excerpt":"Git 정리하기 Git은 버전을 편리하게 관리할 수 있도록 도와주는 도구이다. 개인 뿐만 아니라 다른 사람과의 협업을 하는 경우에도 큰 도움이 된다. Git Tool GitHub DeskTop : commands에서 사용할 때 보다 사용할 수 있는 기능이 극히 제한적이다. Sourcetree : 다양한 기능을 사용할 수 있고, 전반적으로 많이 사용하고 있지만 역시 commands에서 사용할 수 있는 명령어보다 적다. GitKraken : UI가 화려한 Tool   Git 설치 여부 확인 방법 Git 설치 여부 확인하기 위해서는 터미널에서 git —version 명령어를 쳤을 때 버전이 나온다면 Git이 설치되어 있는 것이다. Git의 설정 정보 확인 방법 git을 설치하면 git에 대한 모든 설정들을 확인하려면 git config —list 명령어를 활용해 확인 할 수 있다. file로 확인하고 싶다면 git —global -e 명령어를 사용하면 된다. Git의 설정 정보를 특정 …","frontmatter":{"categories":"git","title":"Git 정리","date":"September 29, 2021"},"fields":{"slug":"/git-study/"}}},{"node":{"id":"8c36d57d-9137-5712-8dfa-7b8ec9e68336","excerpt":"내가 블로그를 시작하게 된 계기는 개발이 아닌 관련 공부를 할 때 정리를 하고 싶어서 여러가지 블로그를 찾아보다가 현재 사용중인 GitHub와 연동하여 사용할 수 있는 블로그 라이브러리인 Gatsby를 알게 되어 만들게 되었다. Gatsby로 블로그를 만들기 위해 처음에는 관련 테마를 찾아보고 맘에 드는 테마를 적용하여 만들기로 했다. 이제부터 내가 Gatsby 블로그를 만드는 과정을 소개한다. 원하는 테마의 Gatsby Clone Repository 생성(Repository명은 꼭 GitHubID.github.io) Your old repository’s clone URL에 getsby 테마의 repository url 넣기 cd Repository 주소 \nnpm install npm install gh-pages —save-dev npm run deploy git branch gh-pages Setting-Pages-Source Branch를 gh-pages로 설정 git br…","frontmatter":{"categories":"git","title":"Gatsby 테마로 GitHub Blog 만들기","date":"September 25, 2021"},"fields":{"slug":"/how-to-start-gatsby/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"정우영","bio":{"role":"개발자","description":["커뮤니케이션을 중요시하는","책임감이 있는","이로운 것을 만드는"],"thumbnail":"sample.png"},"social":{"github":"https://github.com/woo0dev","linkedIn":"","email":""}}}}},"pageContext":{}},"staticQueryHashes":["1073350324","1562467322","2938748437"]}