{"componentChunkName":"component---src-templates-blog-template-js","path":"/iOS-UserInterface-Framework/","result":{"data":{"cur":{"id":"e0c510df-43bf-5b1a-bd4f-66d23c631b58","html":"<h1 id=\"uikit\" style=\"position:relative;\"><a href=\"#uikit\" aria-label=\"uikit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UIKit</h1>\n<p>UI(User Interface) Kit Framework는 사용자 인터페이스를 관리하고, 이벤트를 처리하는게 주 목적인 Framework이다.\nmacOS에서는 Application Kit(AppKit) Framework를 사용했었지만 iOS로 넘어오면서 UIKit으로 대체되었다.\nUIKit에서 주로 처리하는 사용자 이벤트로는 제스처 처리, 애니메이션, 그림 그리기, 이미지 처리, 텍스트 처리 등이 있다.\n또한 테이블뷰, 슬라이더, 버튼, 텍스트 필트, Alert 창 등 Application의 화면을 구성하는 요소도 포함된다.\nUIViewController, UIView, UIAlertController 등 앞에 UI가 붙는 클래스들을 사용하려면 반드시 UIKit을 상속해야한다.</p>","excerpt":"UIKit UI(User Interface) Kit Framework는 사용자 인터페이스를 관리하고, 이벤트를 처리하는게 주 목적인 Framework이다.\nmacOS에서는 Application Kit(AppKit) Framework를 사용했었지만 iOS로 넘어오면서 UIKit으로 대체되었다.\nUIKit에서 주로 처리하는 사용자 이벤트로는 제스처 처리, 애니메이션, 그림 그리기, 이미지 처리, 텍스트 처리 등이 있다.\n또한 테이블뷰, 슬라이더, 버튼, 텍스트 필트, Alert 창 등 Application의 화면을 구성하는 요소도 포함된다.\nUIViewController, UIView, UIAlertController 등 앞에 UI가 붙는 클래스들을 사용하려면 반드시 UIKit을 상속해야한다.","frontmatter":{"date":"October 15, 2021","title":"iOS 앱을 만들고, User Interface를 구성하는 데 필수적인 프레임워크 이름은 무엇인가?","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/iOS-UserInterface-Framework/"}},"next":{"id":"781a5e85-4732-5588-9f83-382773863a9f","html":"<h1 id=\"gcdgrand-central-dispatch란\" style=\"position:relative;\"><a href=\"#gcdgrand-central-dispatch%EB%9E%80\" aria-label=\"gcdgrand central dispatch란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GCD(Grand Central Dispatch)란?</h1>\n<p>Background에서 Thread를 관리하면서 동시적으로 작업을 실행시키는 낮은 수준의 API를 제공하는 라이브러리이며,멀티 코어 프로세서 시스템에 대한 응용 프로그램 지원을 최적화하기 위해 Apple에서 개발한 기술이다.</p>\n<h3 id=\"gcd의-동작-방식\" style=\"position:relative;\"><a href=\"#gcd%EC%9D%98-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D\" aria-label=\"gcd의 동작 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GCD의 동작 방식</h3>\n<p>작업단위는 Block(Swift에서는 Closure)이라 불리며, DispatchQueue가 이 Block들을 관리한다.\nGDC는 각 어플리케이션에서 생성된 DispatchQueue를 읽는 멀티코어 실행엔진을 가지고 있으며, 이것이 Queue에 등록된 각 작업을 꺼내 Thread에 할당하고 개발자는 내부 동작을 자세히 알 필요 없이 Queue에 작업을 넘기기만 하면 되서, Thread를 직접 생성하고 관리하는 것에 비해 관리 용이성과, 이식성, 성능 증가하게 되었습니다.\nApple 공식 문서에서도 Thread 대신 GCD를 권장한다.  </p>\n<h3 id=\"dispatchqueue\" style=\"position:relative;\"><a href=\"#dispatchqueue\" aria-label=\"dispatchqueue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DispatchQueue</h3>\n<ul>\n<li>GCD는 App이 Block 객체 형태로 작업을 전송할 수 있는 FIFO Queue를 제공하고 관리한다.</li>\n<li>Queue에 전달된 작업은 시스템이 전적으로 관리하는 Thread pool에서 실행된다.</li>\n<li>DispatchQueue는 2개의 Type(Serial / Concurrent)으로 구분되며 둘 모두 FIFO 순서로 처리된다.</li>\n<li>App을 실행하면 시스템이 자동으로 MainThread 위에서 작동하는 Serial Queue를 만들어서 작업을 수행하고, 그 외에 추가적으로 여러 개의 Concurrent Queue를 만들어서 Queue를 관리한다.</li>\n<li>각 작업은 동기(sync) 방식과 비동기(async) 방식으로 실행 가능하지만 Serial Queue에서는 async만 사용 가능하다.  </li>\n</ul>\n<h4 id=\"serial-queue\" style=\"position:relative;\"><a href=\"#serial-queue\" aria-label=\"serial queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serial Queue</h4>\n<ul>\n<li>Serial Queue는 Queue에 추가된 순서대로 한번에 하나의 task를 실행한다.  </li>\n</ul>\n<h4 id=\"concurren-queue\" style=\"position:relative;\"><a href=\"#concurren-queue\" aria-label=\"concurren queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concurren Queue</h4>\n<ul>\n<li>Concurrent Queue는 동시에 하나 이상의 task를 실행하지만 Queue에 추가됐을 때에 추가된 순서대로 작업을 계속 진행한다.</li>\n</ul>","frontmatter":{"date":"October 14, 2021","title":"GCD API의 동작 방식과 필요성","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/GCDAPI/"}},"prev":{"id":"b35fce32-172c-5b1a-a05f-63b6a9c09597","html":"<h1 id=\"foundation이란\" style=\"position:relative;\"><a href=\"#foundation%EC%9D%B4%EB%9E%80\" aria-label=\"foundation이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Foundation이란?</h1>\n<p>Apple에서 제공하는 기본 프레임워크인 코코아 터치 프레임워크에 포한되어 있는 프레임워크이다.</p>\n<p>Foundation 프레임워크는 데이터 스토리지 및 지속성, 텍스트 처리, 날짜 및 시간 계산, 정렬 및 필터링, 네트워킹을 포함한 애플리케이션과 프레임워크에 대한 기본 기능 계층을 제공한다. Foundation에서 정의한 클래스, 프로토콜, 데이터 유형은 MacOS, iOS, watchOS, tvOS SDK 전반에 걸쳐 사용된다.</p>\n<p>포함된 클래스</p>\n<ul>\n<li>Collections(Sorting, Type…)</li>\n<li>Strings </li>\n<li>Dates and times </li>\n<li>URLs(Networking) </li>\n<li>XML data </li>\n<li>Ports and sockets </li>\n<li>Notification Center interaction</li>\n</ul>","frontmatter":{"date":"October 19, 2021","title":"Foundation Kit은 무엇이고 포함되어 있는 클래스들은 어떤 것이 있을까?","categories":"iOS","author":"woo0dev","emoji":"🐻"},"fields":{"slug":"/FoundationKit/"}},"site":{"siteMetadata":{"siteUrl":"https://woo0dev.github.io","comments":{"utterances":{"repo":"woo0dev/woo0dev.github.io"}}}}},"pageContext":{"slug":"/iOS-UserInterface-Framework/","nextSlug":"/GCDAPI/","prevSlug":"/FoundationKit/"}},"staticQueryHashes":["1073350324","2938748437"]}